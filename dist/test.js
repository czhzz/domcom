/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/assets/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./test/coffee/index.coffee");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./packages/bdd-test-helper/index.js":
/*!*******************************************!*\
  !*** ./packages/bdd-test-helper/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n//export default\nvar _exports = {};\n\nif (typeof window === 'undefined') {\n    var chai = __webpack_require__(/*! chai */ \"chai\");\n} else {\n    var chai = window.chai;\n}\n\n_exports.expect = chai.expect;\n\n_exports.iit = it.only;\n_exports.idescribe = describe.only;\n_exports.nit = function () {};\n_exports.ndescribe = function () {};\n\nexports.default = _exports;\n\n//# sourceURL=webpack:///./packages/bdd-test-helper/index.js?");

/***/ }),

/***/ "./packages/dc-util/index.js":
/*!***********************************!*\
  !*** ./packages/dc-util/index.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar dupStr,\n    globalDcid,\n    hasOwn,\n    isArray,\n    __slice = [].slice;\n\n//export default\nvar _exports = {};\n\n_exports.isArray = isArray = function isArray(item) {\n  return Object.prototype.toString.call(item) === '[object Array]';\n};\n\n_exports.isObject = function (item) {\n  return (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && item !== null;\n};\n\n_exports.cloneObject = function (obj) {\n  var key, result;\n  result = {};\n  for (key in obj) {\n    result[key] = obj[key];\n  }\n  return result;\n};\n\n_exports.pairListDict = function () {\n  var i, keyValuePairs, len, result;\n  keyValuePairs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n  if (keyValuePairs.length === 1) {\n    keyValuePairs = keyValuePairs[0];\n  }\n  len = keyValuePairs.length;\n  i = 0;\n  result = {};\n  while (i < len) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n    i += 2;\n  }\n  return result;\n};\n\ndupStr = function dupStr(str, n) {\n  var i, s;\n  s = '';\n  i = 0;\n  while (i++ < n) {\n    s += str;\n  }\n  return s;\n};\n\n_exports.newLine = function (str, indent, addNewLine) {\n  if (addNewLine) {\n    return '\\n' + dupStr(' ', indent) + str;\n  } else {\n    return str;\n  }\n};\n\n_exports.funcString = function (fn) {\n  var e, s;\n  if (typeof fn !== 'function') {\n    if (fn == null) {\n      return 'null';\n    }\n    if (fn.getBaseComponent) {\n      return fn.toString();\n    } else {\n      try {\n        return JSON.stringify(fn);\n      } catch (_error) {\n        e = _error;\n        return fn.toString();\n      }\n    }\n  }\n  s = fn.toString();\n  if (fn.invalidate) {\n    return s;\n  }\n  if (s.slice(0, 12) === \"function (){\") {\n    s = s.slice(12, s.length - 1);\n  } else if (s.slice(0, 13) === \"function () {\") {\n    s = s.slice(13, s.length - 1);\n  } else {\n    s = s.slice(9);\n  }\n  s = s.trim();\n  if (s.slice(0, 7) === 'return ') {\n    s = s.slice(7);\n  }\n  if (s[s.length - 1] === ';') {\n    s = s.slice(0, s.length - 1);\n  }\n  return 'fn:' + s;\n};\n\nglobalDcid = 1;\n\n_exports.newDcid = function () {\n  return globalDcid++;\n};\n\n_exports.isEven = function (n) {\n  if (n < 0) {\n    n = -n;\n  }\n  while (n > 0) {\n    n -= 2;\n  }\n  return n === 0;\n};\n\n_exports.matchCurvedString = function (str, i) {\n  var ch, level;\n  if (str[i] !== '(') {\n    return;\n  }\n  level = 0;\n  while (ch = str[++i]) {\n    if (ch === '\\\\') {\n      if (!(ch = str[++i])) {\n        return;\n      }\n    } else if (ch === '(') {\n      level++;\n    } else if (ch === ')') {\n      if (level === 0) {\n        return ++i;\n      } else {\n        level--;\n      }\n    }\n  }\n};\n\n_exports.intersect = function (maps) {\n  var isMember, key, m, m2, result, _i, _len, _ref;\n  result = {};\n  m = maps[0];\n  for (key in m) {\n    isMember = true;\n    _ref = maps.slice(1);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      m2 = _ref[_i];\n      if (!m2[key]) {\n        isMember = false;\n        break;\n      }\n    }\n    isMember && (result[key] = m[key]);\n  }\n  return result;\n};\n\n_exports.substractSet = function (whole, unit) {\n  var key;\n  for (key in unit) {\n    delete whole[key];\n  }\n  return whole;\n};\n\n_exports.binarySearch = function (item, items) {\n  var end, index, length, start;\n  length = items.length;\n  if (!length) {\n    return 0;\n  }\n  if (length === 1) {\n    if (items[0] >= item) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n  start = 0;\n  end = length - 1;\n  while (1) {\n    index = start + Math.floor((end - start) / 2);\n    if (start === end) {\n      if (items[index] >= item) {\n        return index;\n      } else {\n        return index + 1;\n      }\n    } else if (item === items[index]) {\n      return index;\n    }\n    if (item === items[index + 1]) {\n      return index + 1;\n    } else if (item < items[index]) {\n      end = index;\n    } else if (item > items[index + 1]) {\n      start = index + 1;\n    } else {\n      return index + 1;\n    }\n  }\n};\n\n_exports.binaryInsert = function (item, items) {\n  var end, index, length, start;\n  length = items.length;\n  if (!length) {\n    items[0] = item;\n    return 0;\n  }\n  if (length === 1) {\n    if (items[0] === item) {\n      return 0;\n    } else if (items[0] > item) {\n      items[1] = items[0];\n      items[0] = item;\n      return 0;\n    } else {\n      items[1] = item;\n      return 1;\n    }\n  }\n  start = 0;\n  end = length - 1;\n  while (1) {\n    index = start + Math.floor((end - start) / 2);\n    if (start === end) {\n      if (items[index] === item) {\n        return index;\n      } else if (items[index] > item) {\n        items.splice(index, 0, item);\n        return index;\n      } else {\n        items.splice(index + 1, 0, item);\n        return index + 1;\n      }\n    } else if (item === items[index]) {\n      return index;\n    }\n    if (item === items[index + 1]) {\n      return index + 1;\n    } else if (item < items[index]) {\n      end = index;\n    } else if (item > items[index + 1]) {\n      start = index + 1;\n    } else {\n      items.splice(index + 1, 0, item);\n      return index + 1;\n    }\n  }\n};\n\n_exports.foreach = function (items, callback) {\n  var i, item, key, result, _i, _len;\n  if (!items) {\n    return;\n  }\n  if (isArray(items)) {\n    result = [];\n    for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {\n      item = items[i];\n      result.push(callback(item, i));\n    }\n  } else {\n    result = {};\n    for (key in items) {\n      item = items[key];\n      result[key] = callback(item, key);\n    }\n  }\n  return result;\n};\n\nhasOwn = Object.hasOwnProperty;\n\n_exports.mixin = function (proto, mix) {\n  var key, value;\n  for (key in mix) {\n    value = mix[key];\n    if (hasOwn.call(proto, key)) {\n      continue;\n    } else {\n      proto[key] = value;\n    }\n  }\n  return proto;\n};\n\n_exports.makeReactMap = function (description) {\n  var field, item, items, pair, reactField, result, _i, _j, _len, _len1, _ref;\n  result = {};\n  items = description.split(/\\s*,\\s*/);\n  for (_i = 0, _len = items.length; _i < _len; _i++) {\n    item = items[_i];\n    pair = item.trim().split(/\\s*:\\s*/);\n    if (pair.length === 1) {\n      result[pair[0]] = '';\n    } else {\n      reactField = pair[1];\n      _ref = pair[0].split(/\\s+/);\n      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n        field = _ref[_j];\n        result[field] = reactField;\n      }\n    }\n  }\n  return result;\n};\n\nexports.default = _exports;\n\n//# sourceURL=webpack:///./packages/dc-util/index.js?");

/***/ }),

/***/ "./packages/lazy-flow-at/index.js":
/*!****************************************!*\
  !*** ./packages/lazy-flow-at/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar atMethod, bind, duplex, flow, funcString, _invalidateBindPath, newLine, react, _ref, _ref1;\n\n_ref = __webpack_require__(/*! dc-util */ \"./packages/dc-util/index.js\"), newLine = _ref.newLine, funcString = _ref.funcString;\n\n_ref1 = flow = __webpack_require__(/*! lazy-flow */ \"./packages/lazy-flow/index.js\").default, bind = _ref1.bind, duplex = _ref1.duplex, react = _ref1.react;\n\natMethod = function atMethod(method) {\n  return function (root, path) {\n    var len, reactive;\n    if (arguments.length === 1) {\n      path = root;\n      if (typeof window !== 'undefined') {\n        root = window;\n      } else {\n        root = global;\n      }\n    }\n    if (typeof path === 'string') {\n      path = path.split(/\\.\\s*/);\n    }\n    if (!path.length) {\n      return root;\n    }\n    if ((typeof root === 'undefined' ? 'undefined' : _typeof(root)) !== 'object') {\n      throw new Error('expect an object as the root of flow.at');\n    }\n    len = path.length;\n    if (len === 0) {\n      return root;\n    }\n    reactive = react(function (value) {\n      var i, item, parent;\n      if (arguments.length) {\n        i = 0;\n        parent = root;\n        while (i < len - 1) {\n          item = parent[path[i]];\n          if (item == null) {\n            item = parent[path[i]] = {};\n          } else if ((typeof parent === 'undefined' ? 'undefined' : _typeof(parent)) !== 'object') {\n            throw new Error('expect an object');\n          }\n          parent = item;\n          i++;\n        }\n        parent[path[i]] = value;\n        if (reactive.cacheValue !== value) {\n          reactive.cacheValue = value;\n          reactive.invalidate();\n          reactive.valid = false;\n        }\n        return value;\n      } else {\n        reactive.valid = true;\n        i = 0;\n        item = root;\n        while (i < len) {\n          if (!item) {\n            return;\n          }\n          item = item[path[i]];\n          i++;\n        }\n        return reactive.cacheValue = item;\n      }\n    });\n    if (method === duplex) {\n      reactive.isDuplex = true;\n    }\n    return _invalidateBindPath(root, path, reactive, method);\n  };\n};\n\n_invalidateBindPath = function invalidateBindPath(root, path, atFunc, method) {\n  var attr, bound, i, len, parent;\n  len = path.length;\n  if (!len) {\n    return atFunc;\n  }\n  parent = root;\n  i = 0;\n  while (i < len) {\n    if (!parent) {\n      return;\n    }\n    attr = path[i];\n    bound = method(parent, attr);\n    bound.onInvalidate(function () {\n      _invalidateBindPath(parent[attr], path.slice(i + 1), atFunc);\n      return atFunc.invalidate();\n    });\n    i++;\n  }\n  return atFunc;\n};\n\nflow.at = atMethod(bind);\n\nflow.at2 = atMethod(duplex);\n\nflow.paths = function (obj, pathPattern) {\n  var flowPaths, head, item, itemList, length, pathList, pathList2, paths, x, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref2;\n  itemList = pathPattern.split(/\\s*\\.\\s*/);\n  paths = [];\n  for (_i = 0, _len = itemList.length; _i < _len; _i++) {\n    item = itemList[_i];\n    if (item[0] === '[') {\n      length = item.length;\n      if (item[item.length - 1] !== ']') {\n        throw new Error(\"wrong format of pathPattern for flow.paths, expect string like 'x.y, '[x, y].z', 'x.[y,z]' ...\");\n      }\n      item = item.slice(1, length - 1);\n      paths.push(item.split(/\\s*\\.\\s*|\\s+/));\n    } else {\n      paths.push([item]);\n    }\n  }\n  pathList = paths[0];\n  _ref2 = paths.slice(1);\n  for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n    item = _ref2[_j];\n    pathList2 = [];\n    for (_k = 0, _len2 = pathList.length; _k < _len2; _k++) {\n      head = pathList[_k];\n      for (_l = 0, _len3 = path.length; _l < _len3; _l++) {\n        x = path[_l];\n        pathList2.push(head.concat([x]));\n      }\n    }\n    pathList = pathList2;\n  }\n  flowPaths = [];\n  for (_m = 0, _len4 = pathList.length; _m < _len4; _m++) {\n    item = pathList[_m];\n    flowPaths.push(at(obj, item));\n  }\n  return flowPaths;\n};\n\nmodule.exports = flow;\nexports.default = flow;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./packages/lazy-flow-at/index.js?");

/***/ }),

/***/ "./packages/lazy-flow-at/test-at.js":
/*!******************************************!*\
  !*** ./packages/lazy-flow-at/test-at.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nvar ddescribe, expect, flow, idescribe, iit, ndescribe, nit, _ref;\n\n_ref = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\"), expect = _ref.expect, iit = _ref.iit, idescribe = _ref.idescribe, nit = _ref.nit, ndescribe = _ref.ndescribe, ddescribe = _ref.ddescribe;\n\nflow = __webpack_require__(/*! ./index */ \"./packages/lazy-flow-at/index.js\");\n\ndescribe('lazy-flow-at', function () {\n  it('should process flow.at', function () {\n    var called, m, path1;\n    m = {};\n    path1 = flow.at(m, 'x.y');\n    expect(path1()).to.equal(void 0);\n    called = false;\n    path1.onInvalidate(function () {\n      return called = true;\n    });\n    path1(1);\n    expect(called).to.equal(true);\n    expect(path1()).to.equal(1);\n    expect(m.x.y).to.equal(1);\n    called = false;\n    m.x = {};\n    expect(called).to.equal(true);\n    return expect(m.x.y).to.equal(void 0);\n  });\n  return it('should process flow.at without root', function () {\n    var path1, root;\n    window.x = void 0;\n    path1 = flow.at('x.y');\n    expect(path1()).to.equal(void 0);\n    path1(1);\n    expect(path1()).to.equal(1);\n    if (typeof window !== 'undefined') {\n      root = window;\n    } else {\n      root = global;\n    }\n    return expect(root.x.y).to.equal(1);\n  });\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./packages/lazy-flow-at/test-at.js?");

/***/ }),

/***/ "./packages/lazy-flow/addon.js":
/*!*************************************!*\
  !*** ./packages/lazy-flow/addon.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar binary, bind, duplex, flow, react, see, unary, _ref;\n\n_ref = __webpack_require__(/*! lazy-flow */ \"./packages/lazy-flow/index.js\"), react = _ref.react, see = _ref.see, bind = _ref.bind, duplex = _ref.duplex, flow = _ref.flow, unary = _ref.unary, binary = _ref.binary;\n\nmodule.exports = flow;\n\nflow.bindings = function (model, name) {\n  var key, result;\n  result = {};\n  for (key in model) {\n    result[key + '$'] = duplex(model, key, name);\n    result[key + '_'] = bind(model, key, name);\n  }\n  return result;\n};\n\nflow.seeAttrs = function (target, from) {\n  var attr, key, value;\n  for (key in from) {\n    value = from[key];\n    attr = target[key];\n    if (typeof attr === 'function') {\n      attr(value);\n    } else {\n      target[key] = see(value);\n    }\n  }\n  return target;\n};\n\nflow.neg = function (x) {\n  return unary(x, function (x) {\n    return -x;\n  });\n};\n\nflow.not = function (x) {\n  return unary(x, function (x) {\n    return !x;\n  });\n};\n\nflow.bitnot = function (x) {\n  return unary(x, function (x) {\n    return ~x;\n  });\n};\n\nflow.reciprocal = function (x) {\n  return unary(x, function (x) {\n    return 1 / x;\n  });\n};\n\nflow.abs = function (x) {\n  return unary(x, Math.abs);\n};\n\nflow.floor = function (x) {\n  return unary(x, Math.floor);\n};\n\nflow.ceil = function (x) {\n  return unary(x, Math.ceil);\n};\n\nflow.round = function (x) {\n  return unary(x, Math.round);\n};\n\nflow.add = function (x, y) {\n  return binary(x, y, function (x, y) {\n    return x + y;\n  });\n};\n\nflow.sub = function (x, y) {\n  return binary(x, y, function (x, y) {\n    return x - y;\n  });\n};\n\nflow.mul = function (x, y) {\n  return binary(x, y, function (x, y) {\n    return x * y;\n  });\n};\n\nflow.div = function (x, y) {\n  return binary(x, y, function (x, y) {\n    return x / y;\n  });\n};\n\nflow.min = function (x, y) {\n  return binary(x, y, function (x, y) {\n    return Math.min(x, y);\n  });\n};\n\nflow.max = function (x, y) {\n  return binary(x, y, function (x, y) {\n    return Math.max(x, y);\n  });\n};\n\nflow.and = function (x, y) {\n  return binary(x, y, function (x, y) {\n    return x && y;\n  });\n};\n\nflow.or = function (x, y) {\n  return binary(x, y, function (x, y) {\n    return x || y;\n  });\n};\n\nflow.funcAttr = function (obj, attr) {\n  return flow(obj, attr, function (value) {\n    var objValue;\n    objValue = obj();\n    if (objValue == null) {\n      return objValue;\n    }\n    if (!arguments.length) {\n      return objValue[attr];\n    } else {\n      return objValue[attr] = value;\n    }\n  });\n};\n\nflow.toggle = function (x) {\n  return x(!x());\n};\n\nflow.if_ = function (test, then_, else_) {\n  if (typeof test !== 'function') {\n    if (test) {\n      return then_;\n    } else {\n      return else_;\n    }\n  } else if (!test.invalidate) {\n    if (typeof then_ === 'function' && typeof else_ === 'function') {\n      return function () {\n        if (test()) {\n          return then_();\n        } else {\n          return else_();\n        }\n      };\n    } else if (then_ === 'function') {\n      return function () {\n        if (test()) {\n          return then_();\n        } else {\n          return else_;\n        }\n      };\n    } else if (else_ === 'function') {\n      return function () {\n        if (test()) {\n          return then_;\n        } else {\n          return else_();\n        }\n      };\n    } else if (test()) {\n      return then_;\n    } else {\n      return else_;\n    }\n  } else {\n    if (typeof then_ === 'function' && typeof else_ === 'function') {\n      if (then_.invalidate && else_.invalidate) {\n        return flow(test, then_, else_, function () {\n          if (test()) {\n            return then_();\n          } else {\n            return else_();\n          }\n        });\n      } else {\n        return function () {\n          if (test()) {\n            return then_();\n          } else {\n            return else_();\n          }\n        };\n      }\n    } else if (typeof then_ === 'function') {\n      if (then_.invalidate) {\n        return flow(test, then_, function () {\n          if (test()) {\n            return then_();\n          } else {\n            return else_;\n          }\n        });\n      } else {\n        return function () {\n          if (test()) {\n            return then_();\n          } else {\n            return else_;\n          }\n        };\n      }\n    } else if (typeof else_ === 'function') {\n      if (else_.invalidate) {\n        return flow(else_, function () {\n          if (test()) {\n            return then_;\n          } else {\n            return else_();\n          }\n        });\n      } else {\n        return function () {\n          if (test()) {\n            return then_;\n          } else {\n            return else_();\n          }\n        };\n      }\n    } else {\n      return flow(test, function () {\n        if (test()) {\n          return then_;\n        } else {\n          return else_;\n        }\n      });\n    }\n  }\n};\n\nflow.thisBind = function (field) {\n  var method;\n  method = react(function () {\n    return this[field];\n  });\n  method.bindComponent = function (component) {\n    var bound;\n    bound = flow.bind(component, field);\n    bound.onInvalidate(function () {\n      method.valid = true;\n      return method.invalidate();\n    });\n    return method;\n  };\n  return method;\n};\n\n//# sourceURL=webpack:///./packages/lazy-flow/addon.js?");

/***/ }),

/***/ "./packages/lazy-flow/index.js":
/*!*************************************!*\
  !*** ./packages/lazy-flow/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar flow,\n    funcString,\n    lazy,\n    newLine,\n    react,\n    renew,\n    see,\n    _ref,\n    __slice = [].slice;\n\n_ref = __webpack_require__(/*! dc-util */ \"./packages/dc-util/index.js\").default, newLine = _ref.newLine, funcString = _ref.funcString;\n\nreact = function react(method) {\n  if (method.invalidate) {\n    return method;\n  }\n  method.valid = false;\n  method.invalidateCallbacks = [];\n  method.onInvalidate = function (callback) {\n    var invalidateCallbacks;\n    if (typeof callback !== 'function') {\n      throw new Error(\"call back should be a function\");\n    } else {\n      invalidateCallbacks = method.invalidateCallbacks || (method.invalidateCallbacks = []);\n      return invalidateCallbacks.push(callback);\n    }\n  };\n  method.offInvalidate = function (callback) {\n    var index, invalidateCallbacks;\n    invalidateCallbacks = method.invalidateCallbacks;\n    if (invalidateCallbacks && (index = invalidateCallbacks.indexOf(callback)) >= 0) {\n      invalidateCallbacks.splice(index, 1);\n      if (!invalidateCallbacks.length) {\n        method.invalidateCallbacks = null;\n      }\n    }\n    return method;\n  };\n  method.invalidate = function () {\n    var callback, _i, _len, _ref1;\n    if (method.valid && method.invalidateCallbacks) {\n      _ref1 = method.invalidateCallbacks;\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        callback = _ref1[_i];\n        callback();\n      }\n      method.valid = false;\n    }\n    return method;\n  };\n  return method;\n};\n\nrenew = function renew(computation) {\n  var _method;\n  _method = function method() {\n    var value;\n    if (!arguments.length) {\n      value = computation.call(this);\n      _method.valid = true;\n      _method.invalidate();\n      return value;\n    } else {\n      throw new Error('flow.renew is not allowed to accept arguments');\n    }\n  };\n  _method.toString = function () {\n    return \"renew: \" + funcString(computation);\n  };\n  return react(_method);\n};\n\nlazy = function lazy(method) {\n  var oldToString;\n  react(method);\n  method.invalidate = function () {\n    var callback, _i, _len, _ref1;\n    if (method.invalidateCallbacks) {\n      _ref1 = method.invalidateCallbacks;\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        callback = _ref1[_i];\n        callback();\n      }\n    }\n    return method;\n  };\n  oldToString = method.toString;\n  method.toString = function () {\n    return \"lazy: \" + oldToString.call(method);\n  };\n  return method;\n};\n\nflow = function flow() {\n  var cacheValue, computation, dep, deps, reactive, _i, _j, _k, _len, _len1;\n  deps = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), computation = arguments[_i++];\n  if (!deps.length) {\n    return lazy(computation);\n  }\n  for (_j = 0, _len = deps.length; _j < _len; _j++) {\n    dep = deps[_j];\n    if (typeof dep === 'function' && !dep.invalidate) {\n      return renew(computation);\n    }\n  }\n  cacheValue = null;\n  reactive = react(function (value) {\n    if (!arguments.length) {\n      if (!reactive.valid) {\n        reactive.valid = true;\n        return cacheValue = computation.call(this);\n      } else {\n        return cacheValue;\n      }\n    } else {\n      if (value === cacheValue) {\n        return value;\n      } else {\n        cacheValue = computation.call(this, value);\n        reactive.invalidate();\n        return cacheValue;\n      }\n    }\n  });\n  for (_k = 0, _len1 = deps.length; _k < _len1; _k++) {\n    dep = deps[_k];\n    if (dep && dep.onInvalidate) {\n      dep.onInvalidate(reactive.invalidate);\n    }\n  }\n  reactive.toString = function () {\n    return \"flow: [\" + function () {\n      var _l, _len2, _results;\n      _results = [];\n      for (_l = 0, _len2 = deps.length; _l < _len2; _l++) {\n        dep = deps[_l];\n        _results.push(dep.toString());\n      }\n      return _results;\n    }().join(',') + \"] --> \" + funcString(computation);\n  };\n  return reactive;\n};\n\nflow.pipe = function () {\n  var computation, dep, deps, reactive, _i, _j, _k, _len, _len1;\n  deps = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), computation = arguments[_i++];\n  for (_j = 0, _len = deps.length; _j < _len; _j++) {\n    dep = deps[_j];\n    if (typeof dep === 'function' && !dep.invalidate) {\n      reactive = react(function () {\n        var args, result, _k, _len1;\n        if (arguments.length) {\n          throw new Error(\"flow.pipe is not allow to have arguments\");\n        }\n        args = [];\n        for (_k = 0, _len1 = deps.length; _k < _len1; _k++) {\n          dep = deps[_k];\n          if (typeof dep === 'function') {\n            args.push(dep());\n          } else {\n            args.push(dep);\n          }\n        }\n        result = computation.apply(this, args);\n        reactive.valid = true;\n        reactive.invalidate();\n        return result;\n      });\n      return reactive;\n    }\n  }\n  reactive = react(function () {\n    var args, _k, _len1;\n    reactive.valid = true;\n    args = [];\n    for (_k = 0, _len1 = deps.length; _k < _len1; _k++) {\n      dep = deps[_k];\n      if (typeof dep === 'function') {\n        args.push(dep());\n      } else {\n        args.push(dep);\n      }\n    }\n    return computation.apply(this, args);\n  });\n  for (_k = 0, _len1 = deps.length; _k < _len1; _k++) {\n    dep = deps[_k];\n    if (dep && dep.onInvalidate) {\n      dep.onInvalidate(reactive.invalidate);\n    }\n  }\n  return reactive;\n};\n\nflow.react = react;\n\nflow.lazy = lazy;\n\nflow.renew = renew;\n\nflow.flow = flow;\n\nflow.see = see = function see(value, transform) {\n  var cacheValue, _method2;\n  cacheValue = value;\n  _method2 = function method(value) {\n    if (!arguments.length) {\n      _method2.valid = true;\n      return cacheValue;\n    } else {\n      value = transform ? transform(value) : value;\n      if (value !== cacheValue) {\n        cacheValue = value;\n        _method2.invalidate();\n      }\n      return value;\n    }\n  };\n  _method2.isDuplex = true;\n  _method2.toString = function () {\n    return \"see: \" + value;\n  };\n  return react(_method2);\n};\n\nflow.seeN = function () {\n  var computation, computations, _i, _len, _results;\n  computations = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n  _results = [];\n  for (_i = 0, _len = computations.length; _i < _len; _i++) {\n    computation = computations[_i];\n    _results.push(see(computation));\n  }\n  return _results;\n};\n\nif (Object.defineProperty) {\n  flow.bind = function (obj, attr, debugName) {\n    var d, _getter, set, setter;\n    d = Object.getOwnPropertyDescriptor(obj, attr);\n    if (d) {\n      _getter = d.get;\n      set = d.set;\n    }\n    if (!_getter || !_getter.invalidate) {\n      _getter = function getter() {\n        if (arguments.length) {\n          throw new Error('should not set value on flow.bind');\n        }\n        _getter.valid = true;\n        return _getter.cacheValue;\n      };\n      _getter.cacheValue = obj[attr];\n      setter = function setter(value) {\n        if (value !== obj[attr]) {\n          if (set) {\n            set.call(obj, value);\n          }\n          _getter.cacheValue = value;\n          _getter.invalidate();\n          return value;\n        }\n      };\n      react(_getter);\n      _getter.toString = function () {\n        return \"\" + (debugName || 'm') + \"[\" + attr + \"]\";\n      };\n      Object.defineProperty(obj, attr, {\n        get: _getter,\n        set: setter\n      });\n    }\n    return _getter;\n  };\n  flow.duplex = function (obj, attr, debugName) {\n    var d, get, _method3, set;\n    d = Object.getOwnPropertyDescriptor(obj, attr);\n    if (d) {\n      get = d.get, set = d.set;\n    }\n    if (!set || !set.invalidate) {\n      _method3 = function method(value) {\n        if (!arguments.length) {\n          _method3.valid = true;\n          return _method3.cacheValue;\n        }\n        if (value !== obj[attr]) {\n          if (set) {\n            set.call(obj, value);\n          }\n          get && get.invalidate && get.invalidate();\n          _method3.cacheValue = value;\n          _method3.invalidate();\n          return value;\n        }\n      };\n      _method3.cacheValue = obj[attr];\n      react(_method3);\n      _method3.isDuplex = true;\n      _method3.toString = function () {\n        return \"\" + (debugName || 'm') + \"[\" + attr + \"]\";\n      };\n      Object.defineProperty(obj, attr, {\n        get: _method3,\n        set: _method3\n      });\n      return _method3;\n    } else {\n      return set;\n    }\n  };\n} else {\n  flow.bind = function (obj, attr, debugName) {\n    var method, _dcBindMethodMap;\n    _dcBindMethodMap = obj._dcBindMethodMap;\n    if (!_dcBindMethodMap) {\n      _dcBindMethodMap = obj._dcBindMethodMap = {};\n    }\n    if (!obj.dcSet$) {\n      obj.dcSet$ = function (attr, value) {\n        var _dcDuplexMethodMap;\n        if (value !== obj[attr]) {\n          _dcBindMethodMap && _dcBindMethodMap[attr] && _dcBindMethodMap[attr].invalidate();\n          return (_dcDuplexMethodMap = this._dcDuplexMethodMap) && _dcDuplexMethodMap[attr] && _dcDuplexMethodMap[attr].invalidate();\n        }\n      };\n    }\n    method = _dcBindMethodMap[attr];\n    if (!method) {\n      method = _dcBindMethodMap[attr] = function () {\n        method.valid = true;\n        return obj[attr];\n      };\n      method.toString = function () {\n        return \"\" + (debugName || 'm') + \"[\" + attr + \"]\";\n      };\n      react(method);\n    }\n    return method;\n  };\n  flow.duplex = function (obj, attr, debugName) {\n    var method, _dcDuplexMethodMap;\n    _dcDuplexMethodMap = obj._dcDuplexMethodMap;\n    if (!_dcDuplexMethodMap) {\n      _dcDuplexMethodMap = obj._dcDuplexMethodMap = {};\n    }\n    if (!obj.dcSet$) {\n      obj.dcSet$ = function (attr, value) {\n        var _dcBindMethodMap;\n        if (value !== obj[attr]) {\n          (_dcBindMethodMap = this._dcBindMethodMap) && _dcBindMethodMap[attr] && _dcBindMethodMap[attr].invalidate();\n          _dcDuplexMethodMap && _dcDuplexMethodMap[attr] && _dcDuplexMethodMap[attr].invalidate();\n        }\n        return value;\n      };\n    }\n    method = _dcDuplexMethodMap[attr];\n    if (!method) {\n      method = _dcDuplexMethodMap[attr] = function (value) {\n        if (!arguments.length) {\n          method.valid = true;\n          return obj[attr];\n        } else {\n          return obj.dcSet$(attr, value);\n        }\n      };\n      method.isDuplex = true;\n      method.toString = function () {\n        return \"\" + (debugName || 'm') + \"[\" + attr + \"]\";\n      };\n      react(method);\n    }\n    return method;\n  };\n}\n\nflow.unary = function (x, unaryFn) {\n  if (typeof x !== 'function') {\n    return unaryFn(x);\n  } else if (x.invalidate) {\n    return flow(x, function () {\n      return unaryFn(x());\n    });\n  } else {\n    return function () {\n      return unaryFn(x());\n    };\n  }\n};\n\nflow.binary = function (x, y, binaryFn) {\n  if (typeof x === 'function' && typeof y === 'function') {\n    if (x.invalidate && y.invalidate) {\n      return flow(x, y, function () {\n        return binaryFn(x(), y());\n      });\n    } else {\n      return function () {\n        return binaryFn(x(), y());\n      };\n    }\n  } else if (typeof x === 'function') {\n    if (x.invalidate) {\n      return flow(x, function () {\n        return binaryFn(x(), y);\n      });\n    } else {\n      return function () {\n        return binaryFn(x(), y);\n      };\n    }\n  } else if (typeof y === 'function') {\n    if (y.invalidate) {\n      return flow(y, function () {\n        return binaryFn(x, y());\n      });\n    } else {\n      return function () {\n        return binaryFn(x, y());\n      };\n    }\n  } else {\n    return binaryFn(x, y);\n  }\n};\n\nmodule.exports = flow;\nexports.default = flow;\n\n//# sourceURL=webpack:///./packages/lazy-flow/index.js?");

/***/ }),

/***/ "./packages/lazy-flow/test-flow.js":
/*!*****************************************!*\
  !*** ./packages/lazy-flow/test-flow.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar bind, bindings, ddescribe, duplex, expect, flow, idescribe, iit, ndescribe, nit, renew, see, seeAttrs, _ref, _ref1, _ref2;\n\n_ref = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\"), expect = _ref.expect, iit = _ref.iit, idescribe = _ref.idescribe, nit = _ref.nit, ndescribe = _ref.ndescribe, ddescribe = _ref.ddescribe;\n\n_ref1 = __webpack_require__(/*! lazy-flow */ \"./packages/lazy-flow/index.js\"), see = _ref1.see, bind = _ref1.bind, duplex = _ref1.duplex, renew = _ref1.renew, flow = _ref1.flow;\n\n_ref2 = __webpack_require__(/*! ./addon */ \"./packages/lazy-flow/addon.js\"), bindings = _ref2.bindings, seeAttrs = _ref2.seeAttrs;\n\ndescribe('reactive flow', function () {\n  it('should see', function () {\n    var r;\n    r = see(1);\n    expect(r()).to.equal(1);\n    expect(r(2)).to.equal(2);\n    return expect(r()).to.equal(2);\n  });\n  it('should renew', function () {\n    var r, x;\n    x = 1;\n    r = renew(function () {\n      return x;\n    }, true);\n    expect(r()).to.equal(1);\n    expect(function () {\n      return r(2);\n    }).to[\"throw\"]();\n    x = 2;\n    return expect(r()).to.equal(2);\n  });\n  it('should flow', function () {\n    var r1, r2, r3;\n    r1 = see(1);\n    r2 = see(2);\n    r3 = flow(r1, r2, function () {\n      return r1() + r2();\n    });\n    expect(r3()).to.equal(3);\n    r1(2);\n    return expect(r3()).to.equal(4);\n  });\n  it('should flow unary', function () {\n    var a_, b_, r, _ref3;\n    _ref3 = bindings({\n      a: 4,\n      b: 2\n    }), a_ = _ref3.a_, b_ = _ref3.b_;\n    r = flow.neg(a_);\n    expect(r()).to.equal(-4, 'neg');\n    r = flow.not(a_);\n    expect(r()).to.equal(false, 'not');\n    r = flow.abs(flow.neg(a_));\n    expect(r()).to.equal(4, 'abs neg');\n    r = flow.bitnot(a_);\n    return expect(r()).to.equal(-5, 'bitnot');\n  });\n  it('should flow binary', function () {\n    var a_, b_, r, _ref3;\n    _ref3 = bindings({\n      a: 4,\n      b: 2\n    }), a_ = _ref3.a_, b_ = _ref3.b_;\n    r = flow.add(a_, b_);\n    expect(r()).to.equal(6, 'add');\n    r = flow.sub(a_, b_);\n    expect(r()).to.equal(2, 'sub');\n    r = flow.mul(a_, b_);\n    expect(r()).to.equal(8, 'mul');\n    r = flow.div(a_, b_);\n    return expect(r()).to.equal(2, 'div');\n  });\n  it('should invalidate flow binary', function () {\n    var a, b, r;\n    a = see(1);\n    b = see(2);\n    r = flow.add(a, b);\n    expect(r()).to.equal(3, 'add');\n    a(3);\n    return expect(r()).to.equal(5, 'add 2');\n  });\n  it('should invalidate bind flow binary', function () {\n    var a, b, m, r;\n    m = {\n      a: 1,\n      b: 2\n    };\n    a = bind(m, 'a', 'm');\n    b = bind(m, 'b', 'm');\n    r = flow.add(a, b);\n    expect(r()).to.equal(3, 'add');\n    expect(function () {\n      return a(3);\n    }).to[\"throw\"]();\n    return expect(r()).to.equal(3, 'add 2');\n  });\n  it('should bind', function () {\n    var a, a2, m;\n    m = {\n      a: 1\n    };\n    a = bind(m, 'a');\n    a2 = bind(m, 'a');\n    expect(a()).to.equal(1);\n    expect(a2()).to.equal(1, 'a2');\n    expect(function () {\n      return a(3);\n    }).to[\"throw\"]();\n    expect(a()).to.equal(1, 'a again');\n    return expect(a2()).to.equal(1, 'a2 again');\n  });\n  it('should process bindings', function () {\n    var a$, a_, _ref3;\n    _ref3 = bindings({\n      a: 1\n    }), a$ = _ref3.a$, a_ = _ref3.a_;\n    a$(3);\n    return expect(a_()).to.equal(3);\n  });\n  it('should process multiple bind and duplex on same object and attr', function () {\n    var a1, a2, b1, b2, m, sum;\n    m = {\n      a: 1,\n      b: 2\n    };\n    a1 = duplex(m, 'a');\n    b1 = duplex(m, 'b');\n    a2 = duplex(m, 'a');\n    b2 = duplex(m, 'b');\n    sum = flow.add(a1, b1);\n    expect(sum()).to.equal(3, 'sum 1');\n    expect(sum.valid).to.equal(true, 'valid 1');\n    a2(3);\n    expect(sum.valid).to.equal(false, 'valid 2');\n    expect(sum()).to.equal(5, 'sum 2');\n    sum = flow.add(a2, b2);\n    expect(sum()).to.equal(5, 'sum 3');\n    expect(sum.valid).to.equal(true, 'valid 3');\n    a2(1);\n    expect(sum.valid).to.equal(false, 'valid 4');\n    return expect(sum()).to.equal(3, 'sum 4');\n  });\n  return it('should seeAttrs', function () {\n    var a, b;\n    a = {};\n    b = {\n      x: 1\n    };\n    seeAttrs(a, b);\n    expect(_typeof(a.x)).to.equal('function');\n    expect(a.x()).to.equal(1);\n    b = {\n      x: 2\n    };\n    seeAttrs(a, b);\n    expect(_typeof(a.x)).to.equal('function');\n    return expect(a.x()).to.equal(2);\n  });\n});\n\n//# sourceURL=webpack:///./packages/lazy-flow/test-flow.js?");

/***/ }),

/***/ "./test/coffee/helper.coffee":
/*!***********************************!*\
  !*** ./test/coffee/helper.coffee ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n//export default\nvar _exports;\n\nmodule.exports = _exports = {};\n\n_exports.newDemoNode = function (id) {\n  var node;\n  node = document.createElement('div');\n  document.body.appendChild(node);\n  id && node.setAttribute('id', id);\n  return node;\n};\n\n_exports.fakeEvent = function (targetNode) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'click';\n  var keyCodeOrOptions = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (typeof keyCodeOrOptions === 'number') {\n    return {\n      target: targetNode,\n      type: type,\n      keyCode: keyCodeOrOptions,\n      preventDefault: function preventDefault() {},\n      stopPropagation: function stopPropagation() {}\n    };\n  } else {\n    return Object.assign({\n      target: targetNode,\n      type: type,\n      preventDefault: function preventDefault() {},\n      stopPropagation: function stopPropagation() {}\n    }, keyCodeOrOptions);\n  }\n};\n\nvar _default = _exports;\nexports.default = _default;\n\n//# sourceURL=webpack:///./test/coffee/helper.coffee?");

/***/ }),

/***/ "./test/coffee/index.coffee":
/*!**********************************!*\
  !*** ./test/coffee/index.coffee ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\ndc.alwaysRender = true;\n\n__webpack_require__(/*! ./test-new-dc */ \"./test/coffee/test-new-dc.coffee\");\n\n__webpack_require__(/*! lazy-flow/test-flow */ \"./packages/lazy-flow/test-flow.js\");\n\n__webpack_require__(/*! lazy-flow-at/test-at */ \"./packages/lazy-flow-at/test-at.js\");\n\n__webpack_require__(/*! ./test-property */ \"./test/coffee/test-property.coffee\");\n\n__webpack_require__(/*! ./test-toString */ \"./test/coffee/test-toString.coffee\");\n\n__webpack_require__(/*! ./test-dc */ \"./test/coffee/test-dc.coffee\"); //require('./test-base-component')\n\n\n__webpack_require__(/*! ./test-component */ \"./test/coffee/test-component.coffee\"); // require('./test-directive')\n\n\n__webpack_require__(/*! ./test-singleton */ \"./test/coffee/test-singleton.coffee\");\n\n__webpack_require__(/*! ./test-merge-if */ \"./test/coffee/test-merge-if.coffee\");\n\n__webpack_require__(/*! ./test-group */ \"./test/coffee/test-group.coffee\"); //require('./test-ref-clone')\n\n\n__webpack_require__(/*! ./test-event */ \"./test/coffee/test-event.coffee\"); //require('./test-route')\n//require('./test-for-demo')\n\n//# sourceURL=webpack:///./test/coffee/index.coffee?");

/***/ }),

/***/ "./test/coffee/test-component.coffee":
/*!*******************************************!*\
  !*** ./test/coffee/test-component.coffee ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _bddTestHelper = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\");\n\nvar _helper = __webpack_require__(/*! ./helper */ \"./test/coffee/helper.coffee\");\n\nvar Component, List, Tag, Text, a, bindings, button, classFn, div, duplex, flow, func, if_, input, li, list, p, span, styleFrom, text, txt;\nvar _dc = dc;\nbindings = _dc.bindings;\nduplex = _dc.duplex;\nflow = _dc.flow;\nclassFn = _dc.classFn;\nstyleFrom = _dc.styleFrom;\nTag = _dc.Tag;\nText = _dc.Text;\nList = _dc.List;\nComponent = _dc.Component;\nlist = _dc.list;\nfunc = _dc.func;\nif_ = _dc.if_;\ntxt = _dc.txt;\na = _dc.a;\np = _dc.p;\nspan = _dc.span;\ntext = _dc.text;\nli = _dc.li;\ndiv = _dc.div;\nbutton = _dc.button;\ninput = _dc.input;\ndescribe(\"test-component\", function () {\n  afterEach(function () {\n    return dc.reset();\n  });\n  describe('construct component', function () {\n    it('component shoud have children', function () {\n      var comp;\n      comp = p({}, [1, 2]);\n      return (0, _bddTestHelper.expect)(comp.children.length).to.equal(2);\n    });\n    it('should construct component', function () {\n      var d, p1;\n      p1 = new Tag('p', {}, []);\n      d = new Tag('div', {}, [p1]);\n      return (0, _bddTestHelper.expect)(d.children[0]).to.equal(p1);\n    });\n    it('tag shoud have children 1', function () {\n      var comp;\n      comp = new Tag('span', {}, [new Text('adf')]);\n      return (0, _bddTestHelper.expect)(comp.children[0].text).to.equal('adf');\n    });\n    return it('tag shoud have children 2', function () {\n      var comp, span1;\n      span1 = new Tag('span', {}, [new Text('adf')]);\n      comp = new Tag('div', {\n        className: classFn('some class'),\n        style: styleFrom(\"width:1px;\")\n      }, [span1]);\n      return (0, _bddTestHelper.expect)(comp.children[0]).to.equal(span1);\n    });\n  });\n  describe('component.create', function () {\n    it('should create tag', function () {\n      var comp;\n      comp = p();\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.tagName).to.equal('P');\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('');\n    });\n    it('should mount tag 1', function () {\n      var comp;\n      comp = new Tag('div', {}, []);\n      comp.mount();\n      return (0, _bddTestHelper.expect)(comp.node.tagName).to.equal('DIV');\n    });\n    it('should correctly create TextNode with 0 as content', function () {\n      var comp;\n      comp = txt(0);\n      comp.mount();\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('0');\n    });\n    it('should correctly create tag with 0 as content', function () {\n      var comp;\n      comp = p(0);\n      comp.mount();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('0');\n    });\n    it('should mount Text with flow value', function () {\n      var a_, b_, comp;\n\n      var _bindings = bindings({\n        a: 1,\n        b: 2\n      });\n\n      a_ = _bindings.a_;\n      b_ = _bindings.b_;\n      comp = txt(flow.add(a_, b_));\n      comp.mount('#demo');\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('3', 'mount');\n    });\n    it('should not run event hanlder while creating tag', function () {\n      var comp, spy;\n      spy = sinon.spy();\n      comp = p({\n        onclick: spy\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(spy.called).to.equal(false);\n      comp.node.onclick({\n        type: 'click'\n      });\n      return (0, _bddTestHelper.expect)(spy.called).to.equal(true);\n    });\n    it('should process event name without on', function () {\n      var comp, spy;\n      spy = sinon.spy();\n      comp = p({\n        onclick: spy\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(spy.called).to.equal(false);\n      comp.node.onclick({\n        type: 'click'\n      });\n      return (0, _bddTestHelper.expect)(spy.called).to.equal(true);\n    });\n    it('should not run event hanlder while rendering tag', function () {\n      var comp, spy;\n      spy = sinon.spy();\n      comp = p({\n        onclick: spy\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(spy.called).to.equal(false);\n      comp.node.onclick({\n        type: 'click'\n      });\n      return (0, _bddTestHelper.expect)(spy.called).to.equal(true);\n    });\n    it('should not run event hanlder while rendering button tag', function () {\n      var comp, spy;\n      spy = sinon.spy();\n      comp = button({\n        id: \"search-ok\",\n        type: \"submit\",\n        onclick: spy\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(spy.called).to.equal(false);\n      comp.node.onclick({\n        type: 'click'\n      });\n      return (0, _bddTestHelper.expect)(spy.called).to.equal(true);\n    });\n    it('should not run event hanlder while rendering div > button tag', function () {\n      var comp, spy;\n      spy = sinon.spy();\n      comp = div(button({\n        id: \"search-ok\",\n        type: \"submit\",\n        onclick: spy\n      }));\n      comp.mount();\n      (0, _bddTestHelper.expect)(spy.called).to.equal(false);\n      comp.children[0].node.onclick({\n        type: 'click'\n      });\n      return (0, _bddTestHelper.expect)(spy.called).to.equal(true);\n    });\n    it('should create tag with attribute', function () {\n      var comp, elm;\n      comp = p({\n        className: 'some class',\n        style: \"width:1px;\"\n      }, []);\n      comp.mount();\n      elm = comp.node;\n      (0, _bddTestHelper.expect)(elm.className).to.equal('some class');\n      return (0, _bddTestHelper.expect)(elm.getAttribute('className')).to.equal(null);\n    });\n    it('should process function value of text', function () {\n      var a_, comp, elm;\n\n      var _bindings2 = bindings({\n        a: 1\n      });\n\n      a_ = _bindings2.a_;\n      comp = text(a_);\n      elm = comp.mount();\n      elm = comp.node;\n      return (0, _bddTestHelper.expect)(elm.value).to.equal('1');\n    });\n    it('component shoud have children 2', function () {\n      var comp;\n      comp = span('adf');\n      return (0, _bddTestHelper.expect)(comp.children[0].text).to.equal('adf');\n    });\n    it('should create tag with children', function () {\n      var comp, span1;\n      comp = p({\n        className: 'some class',\n        style: \"width:1px;\"\n      }, span1 = span(['adf']));\n      (0, _bddTestHelper.expect)(comp.children[0]).to.equal(span1);\n      comp.mount();\n      return (0, _bddTestHelper.expect)(comp.node.getElementsByTagName('span').length).to.equal(1);\n    });\n    it('should mount tag 2', function () {\n      var comp, elm;\n      comp = p({\n        className: 'some class',\n        style: \"width:1px;\"\n      }, [span(['adf'])]);\n      elm = comp.mount('#demo');\n      (0, _bddTestHelper.expect)(comp.parentNode.id).to.equal('demo');\n      return (0, _bddTestHelper.expect)(comp.node.parentNode.id).to.equal('demo');\n    });\n    it('should mount tag with undefined as child', function () {\n      var comp;\n      comp = p({\n        className: 'some class',\n        style: \"width:1px;\"\n      }, span(['adf']), txt(function () {}));\n      comp.mount('#demo');\n      (0, _bddTestHelper.expect)(comp.parentNode.id).to.equal('demo');\n      return (0, _bddTestHelper.expect)(comp.node.parentNode.id).to.equal('demo');\n    });\n    return it('should mount list with undefined as child', function () {\n      var comp, elm;\n      comp = list(span(['adf']), txt(function () {\n        return void 0;\n      }));\n      elm = comp.mount('#demo');\n      (0, _bddTestHelper.expect)(comp.parentNode.id).to.equal('demo');\n      return (0, _bddTestHelper.expect)(comp.node[0].parentNode.id).to.equal('demo');\n    });\n  });\n  return describe('component update', function () {\n    it('should render tag 1', function () {\n      var comp, count;\n      count = 1;\n      comp = new Tag('p', {}, [new Text(function () {\n        return count;\n      })]);\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1');\n      ++count;\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2', 'update 2');\n      ++count;\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('3', 'update 3');\n      comp.tagName = 'div';\n      comp.render();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('3', 'update 4');\n    });\n    it('should update bidirectional bind', function () {\n      var a$, comp;\n\n      var _bindings3 = bindings({\n        a: 1\n      });\n\n      a$ = _bindings3.a$;\n      comp = new Tag('input', {\n        value: a$\n      }, []);\n      comp.mount();\n      return (0, _bddTestHelper.expect)(comp.node.value).to.equal(\"1\");\n    });\n    it('should render tag 2', function () {\n      var comp, count;\n      count = 1;\n      comp = p(txt(function () {\n        return count;\n      }));\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1');\n      ++count;\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2');\n      ++count;\n      comp.render();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('3');\n    });\n    it('should process text with bind', function () {\n      var a_, b_, comp;\n\n      var _bindings4 = bindings({\n        a: 1,\n        b: 2\n      });\n\n      a_ = _bindings4.a_;\n      b_ = _bindings4.b_;\n      comp = p(txt(flow.add(a_, b_)));\n      comp.mount('#demo');\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('3', 'mount');\n      a_(3);\n      b_(4);\n      (0, _bddTestHelper.expect)(a_()).to.equal(3, 'a_');\n      (0, _bddTestHelper.expect)(b_()).to.equal(4, 'b_');\n      comp.render();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('7', 'update');\n    });\n    it('should process bidirectional bind', function () {\n      var a$, comp;\n\n      var _bindings5 = bindings({\n        a: 1\n      });\n\n      a$ = _bindings5.a$;\n      comp = text(a$);\n      comp.mount('#demo');\n      (0, _bddTestHelper.expect)(comp.node.value).to.equal('1');\n      comp.node.value = '2';\n      comp.node.onchange({\n        type: 'change'\n      });\n      return (0, _bddTestHelper.expect)(a$()).to.equal('2');\n    });\n    it('should render div(2) component', function () {\n      var comp;\n      comp = div(2);\n      comp.mount();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2');\n    });\n    it('should execute component.unmount', function () {\n      var comp;\n      comp = div(2);\n      comp.mount();\n      return comp.unmount();\n    });\n    it('should execute component.remove', function () {\n      var comp;\n      comp = div(1);\n      comp.mount((0, _helper.newDemoNode)('replace-demo3'));\n      comp.unmount();\n      return (0, _bddTestHelper.expect)(document.getElementById('replace-demo3').innerHTML).to.equal('');\n    });\n    it('should execute remove child component', function () {\n      var comp1, comp3;\n      comp1 = div(comp3 = div(3));\n      comp1.mount((0, _helper.newDemoNode)('replace-demo4'));\n      comp3.unmount();\n      return (0, _bddTestHelper.expect)(document.getElementById('replace-demo4').innerHTML).to.equal('<div></div>');\n    });\n    it('should execute component.replace', function () {\n      var comp1, comp2;\n      comp1 = div(1);\n      comp1.mount((0, _helper.newDemoNode)('replace-demo'));\n      comp2 = div(2);\n      comp2.replace(comp1);\n      dc.render(true);\n      return (0, _bddTestHelper.expect)(document.getElementById('replace-demo').innerHTML).to.equal('<div>2</div>');\n    });\n    it('should execute replace child component', function () {\n      var comp1, comp2, comp3;\n      comp1 = div(comp3 = div(3));\n      comp1.mount((0, _helper.newDemoNode)('replace-demo2'));\n      (0, _bddTestHelper.expect)(document.getElementById('replace-demo2').innerHTML).to.equal('<div><div>3</div></div>');\n      comp2 = div(2);\n      comp2.replace(comp3);\n      dc.render(true);\n      return (0, _bddTestHelper.expect)(document.getElementById('replace-demo2').innerHTML).to.equal('<div><div>2</div></div>');\n    });\n    return it('p(->12) ', function () {\n      var comp;\n      comp = p(function () {\n        return 12;\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('12');\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('12');\n      comp.render();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('12');\n    });\n  });\n});\n\n//# sourceURL=webpack:///./test/coffee/test-component.coffee?");

/***/ }),

/***/ "./test/coffee/test-dc.coffee":
/*!************************************!*\
  !*** ./test/coffee/test-dc.coffee ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _bddTestHelper = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\");\n\n/**test-component\n*/\nvar isComponent;\nvar _dc = dc;\nisComponent = _dc.isComponent;\ndescribe(\"test dc\", function () {\n  return describe('dc(document)', function () {\n    it('dc(document) should be Component', function () {\n      return (0, _bddTestHelper.expect)(!isComponent(dc(document))).to.equal(true);\n    });\n    (0, _bddTestHelper.nit)('should cache DomComponent', function () {\n      return (0, _bddTestHelper.expect)(dc(document)).to.equal(dc(document));\n    });\n    it('dc(document).bind should be a function', function () {\n      var x;\n      x = 0;\n      return dc(document).bind('onclick', function () {\n        return x = 1;\n      });\n    });\n    return it('dc() chaining call', function () {\n      var comp;\n      return comp = dc.div(at('x y')).data({\n        x: x,\n        y: y\n      });\n    });\n  });\n});\n\n//# sourceURL=webpack:///./test/coffee/test-dc.coffee?");

/***/ }),

/***/ "./test/coffee/test-event.coffee":
/*!***************************************!*\
  !*** ./test/coffee/test-event.coffee ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _bddTestHelper = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\");\n\nvar _helper = __webpack_require__(/*! ./helper */ \"./test/coffee/helper.coffee\");\n\nvar Component, List, Tag, Text, a, button, classFn, div, duplex, func, if_, input, li, list, model, p, see, show, span, styleFrom, text, txt;\nvar _dc = dc;\nduplex = _dc.duplex;\nsee = _dc.see;\nclassFn = _dc.classFn;\nstyleFrom = _dc.styleFrom;\nmodel = _dc.model;\nshow = _dc.show;\nTag = _dc.Tag;\nText = _dc.Text;\nList = _dc.List;\nComponent = _dc.Component;\nlist = _dc.list;\nfunc = _dc.func;\nif_ = _dc.if_;\ntxt = _dc.txt;\na = _dc.a;\np = _dc.p;\nspan = _dc.span;\ntext = _dc.text;\nli = _dc.li;\ndiv = _dc.div;\nbutton = _dc.button;\ninput = _dc.input;\ndescribe(\"component event\", function () {\n  afterEach(function () {\n    return dc.reset();\n  });\n  it('component shoud call listeners before mounting', function () {\n    var comp, x;\n    x = 0;\n    comp = p();\n    comp.on('willMount', function () {\n      return x = 1;\n    });\n    comp.mount();\n    return (0, _bddTestHelper.expect)(x).to.equal(1);\n  });\n  it('component shoud call listeners before mounting if_', function () {\n    var comp, x;\n    x = 0;\n    comp = if_(1, 2, 3);\n    comp.on('willMount', function () {\n      return x = 1;\n    });\n    comp.mount();\n    return (0, _bddTestHelper.expect)(x).to.equal(1);\n  });\n  it('component shoud call then_.listeners before updating if_', function () {\n    var comp, t, x;\n    x = see(0);\n    comp = if_(x, t = txt(1), txt(2));\n    t.on('willMount', function () {\n      return x(1);\n    });\n    comp.mount();\n    (0, _bddTestHelper.expect)(x()).to.equal(0);\n    x(1);\n    comp.render();\n    return (0, _bddTestHelper.expect)(x()).to.equal(1);\n  });\n  it('component shoud not call embeded listeners before updating if_', function () {\n    var comp, t, x;\n    x = see(0);\n    comp = if_(x, p(t = txt(1)), txt(2));\n    t.on('willMount', function () {\n      return x(1);\n    });\n    comp.mount();\n    (0, _bddTestHelper.expect)(x()).to.equal(0);\n    x(1);\n    comp.render();\n    return (0, _bddTestHelper.expect)(x()).to.equal(1);\n  });\n  it('component shoud call listeners after mounting', function () {\n    var comp, x;\n    x = see(0);\n    comp = p();\n    comp.on('willMount', function () {\n      return x(1);\n    });\n    comp.on('willUnmount', function () {\n      return x(2);\n    });\n    comp.mount();\n    (0, _bddTestHelper.expect)(x()).to.equal(1);\n    comp.unmount();\n    return (0, _bddTestHelper.expect)(x()).to.equal(2);\n  });\n  it('component shoud call mount and unmount listeners', function () {\n    var comp, x, y;\n    x = 0;\n    y = 0;\n    comp = if_(1, 2, 3);\n    comp.on('willMount', function () {\n      return x = 1;\n    });\n    comp.on('willUnmount', function () {\n      return y = 2;\n    });\n    comp.mount();\n    (0, _bddTestHelper.expect)(x).to.equal(1);\n    comp.unmount();\n    return (0, _bddTestHelper.expect)(y).to.equal(2);\n  });\n  it('component shoud NOT call then_.listeners[\"mount\"] before updating if_', function () {\n    var comp, t, t2, x, y;\n    x = see(0);\n    y = 0;\n    comp = if_(x, t = txt(1), t2 = txt(2));\n    t.on('willMount', function () {\n      return x(1);\n    });\n    t2.on('willUnmount', function () {\n      return y = 2;\n    });\n    comp.mount();\n    (0, _bddTestHelper.expect)(x()).to.equal(0, 'mount');\n    x(1);\n    comp.render();\n    (0, _bddTestHelper.expect)(x()).to.equal(1);\n    return (0, _bddTestHelper.expect)(y).to.equal(0);\n  });\n  return it('component shoud NOT call embeded mountCallback before updating if_', function () {\n    var comp, t, t2, x, y;\n    x = see(0);\n    y = 0;\n    comp = if_(x, p(t = txt(1)), p(t2 = txt(2)));\n    t.on('willMount', function () {\n      return x(1);\n    });\n    comp.mount();\n    (0, _bddTestHelper.expect)(x()).to.equal(0);\n    x(1);\n    comp.render();\n    (0, _bddTestHelper.expect)(x()).to.equal(1);\n    return (0, _bddTestHelper.expect)(y).to.equal(0);\n  });\n});\ndescribe(\"delegate event\", function () {\n  it('component should delegate click event', function () {\n    var comp, x;\n    x = 0;\n    comp = p();\n    comp.mount();\n    comp.delegate('click');\n\n    comp.do_click = function () {\n      return x = 1;\n    };\n\n    comp.node.onclick((0, _helper.fakeEvent)(comp.node));\n    return (0, _bddTestHelper.expect)(x).to.equal(1);\n  });\n  it('component should delegate click event to its holder', function () {\n    var child, comp, x;\n    x = 0;\n    comp = list([child = p()]);\n    comp.mount();\n    child.delegateToHolder('click');\n\n    comp.do_click = function () {\n      return x = 1;\n    };\n\n    child.node.onclick((0, _helper.fakeEvent)(child.node));\n    return (0, _bddTestHelper.expect)(x).to.equal(1);\n  });\n  it('component should delegate click event from tag ancestor to its holder', function () {\n    var child, comp, lst, x;\n    x = 0;\n    comp = div(lst = list([child = p()]));\n    comp.mount();\n    comp.delegateToHolder('click');\n\n    lst.do_click = function () {\n      return x = 1;\n    };\n\n    comp.node.onclick((0, _helper.fakeEvent)(child.node));\n    (0, _bddTestHelper.expect)(child.node.onclick).to.be.null;\n    return (0, _bddTestHelper.expect)(x).to.equal(1);\n  });\n  return it('component should delegate click event by given component', function () {\n    var child, comp, lst, x;\n    x = 0;\n    comp = div(lst = list([child = p()]));\n    comp.mount();\n    comp.delegateToComponent('click', lst);\n\n    lst.do_click = function () {\n      return x = 1;\n    };\n\n    comp.node.onclick((0, _helper.fakeEvent)(child.node));\n    (0, _bddTestHelper.expect)(child.node.onclick).to.be.null;\n    return (0, _bddTestHelper.expect)(x).to.equal(1);\n  });\n});\n\n//# sourceURL=webpack:///./test/coffee/test-event.coffee?");

/***/ }),

/***/ "./test/coffee/test-group.coffee":
/*!***************************************!*\
  !*** ./test/coffee/test-group.coffee ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _bddTestHelper = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\");\n\nvar _helper = __webpack_require__(/*! ./helper */ \"./test/coffee/helper.coffee\");\n\nvar Component, List, Tag, Text, TranBlock, a, accordion, accordionGroup, bind, case_, comp, demo2Node, div, dontUnmount, each, every, func, funcEach, if_, isComponent, list, p, pour, see, span, text, txt;\nvar _dc = dc;\nisComponent = _dc.isComponent;\nComponent = _dc.Component;\nTranBlock = _dc.TranBlock;\nTag = _dc.Tag;\nText = _dc.Text;\ntxt = _dc.txt;\nlist = _dc.list;\nList = _dc.List;\nfunc = _dc.func;\nif_ = _dc.if_;\ncase_ = _dc.case_;\nfunc = _dc.func;\neach = _dc.each;\nevery = _dc.every;\nfuncEach = _dc.funcEach;\naccordionGroup = _dc.accordionGroup;\naccordion = _dc.accordion;\na = _dc.a;\np = _dc.p;\nspan = _dc.span;\ntext = _dc.text;\ndiv = _dc.div;\nbind = _dc.bind;\npour = _dc.pour;\nsee = _dc.see;\ndemo2Node = null;\ncomp = null;\ndontUnmount = false;\ndescribe('test-group: group component: List, each', function () {\n  beforeEach(function () {\n    demo2Node = document.getElementById('demo2');\n    return demo2Node.innerHTML = '';\n  });\n  afterEach(function () {\n    dc.reset();\n\n    if (comp && comp.node && !dontUnmount) {\n      return comp.unmount();\n    }\n  });\n  describe('List', function () {\n    afterEach(function () {\n      dc.reset();\n\n      if (comp && comp.node && !dontUnmount) {\n        return comp.unmount();\n      }\n    });\n    it('all of item in list should be  component', function () {\n      comp = list([1, 2]);\n      return (0, _bddTestHelper.expect)(isComponent(comp.children[0])).to.equal(true);\n    });\n    it('should create list component', function () {\n      comp = list([span(['adf'])]);\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node[0].tagName).to.equal('SPAN');\n      return comp.unmount();\n    });\n    it('component list should have length', function () {\n      var lst;\n      lst = list([1, 2]);\n      return (0, _bddTestHelper.expect)(lst.children.length).to.equal(2);\n    });\n    it('list can be constructructed  from mulitple argumnents', function () {\n      var lst;\n      lst = list(1, 2);\n      return (0, _bddTestHelper.expect)(lst.children.length).to.equal(2);\n    });\n    it('should create list', function () {\n      var lst;\n      lst = list(1, 2);\n      lst.mount();\n      (0, _bddTestHelper.expect)(lst.node[0].textContent).to.equal('1');\n      (0, _bddTestHelper.expect)(lst.node[1].textContent).to.equal('2');\n      return lst.unmount();\n    });\n    it('should create list with attrs', function () {\n      var x;\n      x = 2;\n      comp = list({\n        class: 'main',\n        fakeProp: function fakeProp() {\n          return x;\n        }\n      }, 1, txt(function () {\n        return x;\n      }));\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.tagName).to.equal('DIV');\n      (0, _bddTestHelper.expect)(comp.node.childNodes[0].textContent).to.equal('1');\n      (0, _bddTestHelper.expect)(comp.node.childNodes[1].textContent).to.equal('2');\n      x = 3;\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.fakeProp).to.equal(3);\n      (0, _bddTestHelper.expect)(comp.node.childNodes[1].textContent).to.equal('3', 'textContent update');\n      return comp.unmount();\n    });\n    it('list(txt(->12))', function () {\n      comp = list(txt(function () {\n        return 12;\n      }));\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('12');\n      return comp.unmount();\n    });\n    it('list setChildren after mounting', function () {\n      comp = new List([txt(1)]);\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('1');\n      (0, _bddTestHelper.expect)(function () {\n        var t2;\n        return comp.setChildren(1, [t2 = txt(2)]);\n      }).not.to.throw();\n      return comp.unmount();\n    });\n    it('list setChildren: similar to splitter', function () {\n      var t2, t3;\n      comp = new List([txt(1), t3 = txt(3)]);\n      comp.setChildren(1, [t2 = txt(2), t3]);\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('1');\n      (0, _bddTestHelper.expect)(comp.node[1].textContent).to.equal('2');\n      (0, _bddTestHelper.expect)(comp.node[2].textContent).to.equal('3');\n      return comp.unmount();\n    });\n    it('list(p(txt(->12))) ', function () {\n      comp = list(p(txt(function () {\n        return 12;\n      })));\n      comp.mount();\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('12');\n      return comp.unmount();\n    });\n    it('list(p(->12))', function () {\n      comp = list(p(function () {\n        return 12;\n      }));\n      comp.mount();\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('12');\n      return comp.unmount();\n    });\n    it('list(txt(1))', function () {\n      var demoNode;\n      comp = new List([txt(1)]);\n      comp.mount(demoNode = (0, _helper.newDemoNode)('list'));\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('1', 1);\n      comp.render();\n      comp.setLength(0);\n      dc.clean();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('', 2);\n      comp.render();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('', 3);\n      comp.unmount();\n      return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('', 4);\n    });\n    it('list(txt(1), txt(2), txt(3)) and move child', function () {\n      var demoNode, t1, t2, t3;\n      comp = list(t1 = txt(1), t2 = txt(2), t3 = txt(3));\n      comp.mount(demoNode = (0, _helper.newDemoNode)('list'));\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('123');\n      comp.removeChild(0);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.children.indexOf(t1)).to.equal(-1, 'dcid 0');\n      (0, _bddTestHelper.expect)(comp.children.indexOf(t2)).to.equal(0, 'dcid 1');\n      (0, _bddTestHelper.expect)(comp.children.indexOf(t3)).to.equal(1, 'dcid 2');\n      (0, _bddTestHelper.expect)(comp.children.length).to.equal(2);\n      comp.pushChild(t1);\n      comp.render();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('231');\n      return comp.unmount();\n    });\n    return it('should not renderDom after removing', function () {\n      var demoNode, t1, t2, t3;\n      comp = list(t1 = txt(1), t2 = txt(2), t3 = txt(3));\n      comp.mount(demoNode = (0, _helper.newDemoNode)('list'));\n      comp.removeChild(0);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('23', 1);\n      (0, _bddTestHelper.expect)(t1.node.parentNode).to.equal(null);\n      (0, _bddTestHelper.expect)(t1.removed).to.equal(true);\n      t1.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(t1.node.parentNode).to.equal(null);\n      return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('23', 2);\n    });\n  });\n  describe('Tag', function () {\n    return it('should have correct nextNode', function () {\n      var div1, div2, t2, t3, t4, t5;\n      comp = div(div1 = div(txt(1), t2 = txt(2), t3 = txt(3)), div2 = div(t4 = txt(4), t5 = txt(5), txt(6)));\n      comp.mount(); // should not let one component occurs in the different place of the dom\n\n      div1.insertChildAfter(t5, t2);\n      return comp.render();\n    });\n  }); // expect(-> comp.render()).to.throw()\n\n  describe('each of array, object', function () {\n    it('simple each for array', function () {\n      var demoNode;\n      comp = every([1, 2], function (item) {\n        return item;\n      });\n      comp.mount(demoNode = (0, _helper.newDemoNode)('list'));\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.length).to.equal(2);\n      return comp.unmount();\n    });\n    it('all key of object 1', function () {\n      var demoNode;\n      comp = every({\n        a: 1,\n        b: 2\n      }, function (value) {\n        return value;\n      });\n      comp.mount(demoNode = (0, _helper.newDemoNode)('list'));\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.children.length).to.equal(2);\n      return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('12');\n    });\n    it('all key of object 2', function () {\n      var demoNode;\n      demoNode = (0, _helper.newDemoNode)('list');\n      comp = every({}, {\n        a: 1,\n        b: 2\n      }, function (value, key) {\n        return list(key, ':', value);\n      });\n      comp.mount(demoNode);\n      (0, _bddTestHelper.expect)(comp.children.length).to.equal(2);\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('a:1b:2');\n      comp.render();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('a:1b:2');\n    });\n    return it('all key of object 3', function () {\n      var demoNode, options;\n      options = {\n        itemFunc: function itemFunc(value, key) {\n          return list(key, ':', value);\n        },\n        separatorFunc: function separatorFunc() {\n          return ', ';\n        }\n      };\n      comp = every({}, {\n        a: 1,\n        b: 2\n      }, options);\n      comp.mount(demoNode = (0, _helper.newDemoNode)('list'));\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.children.length).to.equal(2);\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('a:1, b:2');\n    });\n  });\n  describe('each', function () {\n    it('should create empty each component', function () {\n      var lst;\n      demo2Node = document.getElementById('demo2');\n      demo2Node.innerHTML = '';\n      comp = each(lst = [], function (item, i) {\n        return p(item);\n      });\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(comp.node).to.be.instanceof(Array);\n      (0, _bddTestHelper.expect)(comp.node.length).to.equal(0);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.length).to.equal(0);\n      return comp.unmount();\n    });\n    it('should create each component with single item', function () {\n      var lst;\n      comp = each(lst = [1], function (item, i) {\n        return p(item);\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node).to.be.instanceof(Array);\n      (0, _bddTestHelper.expect)(comp.node.length).to.equal(1);\n      (0, _bddTestHelper.expect)(comp.node[0].innerHTML).to.equal('1');\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.length).to.equal(1);\n      (0, _bddTestHelper.expect)(comp.node[0].innerHTML).to.equal('1');\n      return comp.unmount();\n    });\n    it('should set children nextNode correctly', function () {\n      var each1, lst;\n      demo2Node = document.getElementById('demo2');\n      demo2Node.innerHTML = '';\n      lst = [1, 2];\n      comp = list(each1 = each(lst, function (item) {\n        return p(item);\n      }), 'some other thing');\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(each1.nextNode).to.equal(comp.node[1]);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('<p>1</p><p>2</p>some other thing');\n      lst.push(3);\n      comp.render();\n      (0, _bddTestHelper.expect)(each1.children[2].node).to.equal(each1.node[2]);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('<p>1</p><p>2</p><p>3</p>some other thing');\n      comp.unmount();\n      return (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('');\n    });\n    it('should create each component with two item', function () {\n      var lst;\n      comp = each(lst = ['each', 'simple'], function (item, i) {\n        return p(item);\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node).to.be.instanceof(Array);\n      (0, _bddTestHelper.expect)(comp.node[0]).to.be.instanceof(Element);\n      (0, _bddTestHelper.expect)(comp.node[1].innerHTML).to.equal('simple');\n      return comp.unmount();\n    });\n    it('should mount and render each component', function () {\n      var demoNode, lst;\n      dontUnmount = true;\n      document.getElementById('demo').innerHTML = '';\n      comp = each(lst = ['each', 'simple'], function (item, i) {\n        return p(item);\n      });\n      comp.mount(demoNode = (0, _helper.newDemoNode)(\"each\"));\n      (0, _bddTestHelper.expect)(comp.node[0].innerHTML).to.equal('each');\n      (0, _bddTestHelper.expect)(comp.node[1].innerHTML).to.equal('simple');\n      lst.setItem(0, 3);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node[0].innerHTML).to.equal('3', 'update node 0');\n      lst.setItem(1, 4);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node[1].innerHTML).to.equal('4', 'update node 1');\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>3</p><p>4</p>', 'update innerHTML');\n      lst.setItem(2, 5);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node[2].innerHTML).to.equal('5', 'update list[2] = 5');\n      lst.setLength(0);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.children.length).to.equal(0, 'comp.children.length = 0');\n      (0, _bddTestHelper.expect)(comp.node.length).to.equal(0, 'node.length');\n      return comp.unmount();\n    });\n    it('should process binding on item', function () {\n      var lst;\n      document.getElementById('demo').innerHTML = '';\n      comp = each(lst = [{\n        text: 'a'\n      }, {\n        text: 'b'\n      }], function (item, i) {\n        return p(txt(bind(item, 'text')));\n      });\n      comp.mount(\"#demo\");\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('a');\n      (0, _bddTestHelper.expect)(comp.node[1].textContent).to.equal('b');\n      lst[0].text = 'c';\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('c', 'update c');\n      lst[1].text = 'd';\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node[1].textContent).to.equal('d', 'update d');\n      lst.setItem(2, {\n        text: 'e'\n      });\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node[2].textContent).to.equal('e');\n      lst.setLength(0);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.length).to.equal(0);\n      return comp.unmount();\n    });\n    it('should process items in template function', function () {\n      var lst;\n      comp = each(lst = ['a', 'b'], {\n        itemFunc: function itemFunc(item, i, listComponent) {\n          return p(txt(function () {\n            return item;\n          }));\n        }\n      });\n      comp.mount();\n      lst.setItem(0, 'c');\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('c');\n      return comp.unmount();\n    });\n    it('should process tag with each', function () {\n      var each1, text1, x$;\n      dontUnmount = true;\n      x$ = see(1);\n      text1 = null;\n      comp = new Tag('div', {}, [each1 = each([1], {\n        itemFunc: function itemFunc(item) {\n          return text1 = txt(x$);\n        }\n      })]);\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1');\n      x$(2);\n      comp.render();\n      (0, _bddTestHelper.expect)(text1.node.textContent).to.equal('2', 'update, 2');\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('2');\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2');\n      return comp.unmount();\n    });\n    it('should create and update deeper embedded each', function () {\n      var each1, listItems, span1, x;\n      x = 1;\n      comp = div({}, span1 = new Tag('span', {}, [each1 = each(listItems = [x], {\n        itemFunc: function itemFunc(item) {\n          return txt(item);\n        }\n      })]));\n      comp.mount();\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(span1.node);\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('1');\n      listItems.setItem(0, 2);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(span1.node);\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('2');\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<span>2</span>');\n      return comp.unmount();\n    });\n    it('should create and update each where item return a closure variable', function () {\n      var x;\n      x = see(1);\n      comp = each([1], {\n        itemFunc: function itemFunc() {\n          return txt(x);\n        }\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('1');\n      x(2);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('2');\n      return comp.unmount();\n    });\n    it('should create and update embedded each where item return a closure variable', function () {\n      var each1, x;\n      x = see(1);\n      comp = new Tag('span', {}, [each1 = each([1], {\n        itemFunc: function itemFunc(item) {\n          return txt(x);\n        }\n      })]);\n      comp.mount();\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(comp.node);\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('1');\n      x(2);\n      comp.render();\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(comp.node);\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('2');\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2');\n      return comp.unmount();\n    });\n    it('should create and update embedded each in 3 layer', function () {\n      var each1, span1, x;\n      x = see(1);\n      comp = div({}, div({}, span1 = new Tag('span', {}, [each1 = each([1], {\n        itemFunc: function itemFunc(item) {\n          return txt(x);\n        }\n      })])));\n      comp.mount();\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(span1.node);\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('1');\n      x(2);\n      comp.render();\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(span1.node);\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('2');\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<div><span>2</span></div>');\n      return comp.unmount();\n    });\n    it('should mount and update each', function () {\n      comp = new Tag('span', {}, [each([1], function (item) {\n        return txt(1);\n      })]);\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1');\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1');\n      return comp.unmount();\n    });\n    it('should push and setLength of each', function () {\n      var lst;\n      lst = [1, 2, 3, 4, 5, 6];\n      comp = each(lst, function (item) {\n        return txt(item);\n      });\n      comp.mount();\n      lst.push(7);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.length).to.equal(7, 'push 7');\n      lst.setLength(4);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.length).to.equal(4, 'setLength 4');\n      return comp.unmount();\n    });\n    it('should update each with component as the item of list 1', function () {\n      var s;\n      comp = each([txt(1)], function (item) {\n        return item;\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal(s = '1');\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('1');\n      return comp.unmount();\n    });\n    it('should update each with component as the item of list 2', function () {\n      var s;\n      comp = div(each([txt(1)], function (item) {\n        return item;\n      }));\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal(s = '1');\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1');\n      return comp.unmount();\n    });\n    it('should update each with component as the item of list 3', function () {\n      var s;\n      comp = div(div(each([txt(1)], function (item) {\n        return item;\n      })));\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal(s = '<div>1</div>');\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<div>1</div>');\n      return comp.unmount();\n    });\n    it('should always attach and detach in multiple iteration 0', function () {\n      var showingEach$;\n      showingEach$ = see(true);\n      comp = if_(showingEach$, txt(1));\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('1');\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(demo2Node);\n      showingEach$(false);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(void 0);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('');\n      showingEach$(true);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(demo2Node);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('1');\n      showingEach$(false);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('');\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(void 0);\n      return comp.unmount();\n    });\n    it('should always attach and detach each in multiple iteration 1', function () {\n      var lst4, showingEach$;\n      showingEach$ = see(true);\n      lst4 = [1, 2];\n      comp = if_(showingEach$, each(lst4, function (item) {\n        return txt(item);\n      }));\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('12');\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(demo2Node);\n      showingEach$(false);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(void 0);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('');\n      showingEach$(true);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(demo2Node);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('12');\n      showingEach$(false);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('');\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(void 0);\n      return comp.unmount();\n    });\n    return it('should always attach and detach each in multiple iteration 2', function () {\n      var lst4, showingEach$;\n      showingEach$ = see(true);\n      lst4 = [1, 2];\n      comp = if_(showingEach$, each(lst4, function (item) {\n        return div(item);\n      }));\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('<div>1</div><div>2</div>');\n      showingEach$(false);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(void 0);\n      showingEach$(true);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(demo2Node);\n      showingEach$(false);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.parentNode).to.equal(void 0);\n      return comp.unmount();\n    });\n  });\n  return describe('funcEach', function () {\n    it('should process funcEach', function () {\n      var x;\n      x = 1;\n      comp = funcEach(function () {\n        return [x];\n      }, {\n        itemFunc: function itemFunc(item) {\n          return item;\n        }\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('1');\n      x = 2;\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('2', 'after x = 2');\n      return comp.unmount();\n    });\n    it('should create and update funcEach', function () {\n      var x;\n      dontUnmount = true;\n      x = 1;\n      comp = funcEach(function () {\n        return [x];\n      }, {\n        itemFunc: function itemFunc(item) {\n          return txt(item);\n        }\n      });\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('1');\n      x = 2;\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('2', 'update 2');\n      (0, _bddTestHelper.expect)(comp.isList).to.equal(true);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('2', 'innerHTML');\n      x = 3;\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('3', 'update 3');\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('3', 'innerHTML');\n      return comp.unmount();\n    });\n    it('should process each under each and with function as items 1', function () {\n      var each1, each2, x;\n      x = 1;\n      each2 = null;\n      comp = div({}, each1 = each([1], function () {\n        return each2 = funcEach(function () {\n          return [x];\n        }, function (item) {\n          return item;\n        });\n      }));\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('<div>1</div>');\n      dontUnmount = true;\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(comp.node);\n      (0, _bddTestHelper.expect)(each1.node[0][0].textContent).to.equal('1');\n      (0, _bddTestHelper.expect)(each2.node[0].textContent).to.equal('1');\n      x = 2;\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('<div>2</div>');\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(comp.node);\n      (0, _bddTestHelper.expect)(each2.node[0].textContent).to.equal('2');\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2', 'after x = 2');\n      return comp.unmount();\n    });\n    it('should process each under each and with function as items 0', function () {\n      var each1, each2, x;\n      x = 1;\n      each2 = null;\n      comp = each1 = each([1], function () {\n        return each2 = funcEach(function () {\n          return [x];\n        }, {\n          itemFunc: function itemFunc(item) {\n            return txt(item);\n          }\n        });\n      });\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('1');\n      dontUnmount = true;\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(each1.parentNode);\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(demo2Node);\n      (0, _bddTestHelper.expect)(each1.node[0][0].textContent).to.equal('1');\n      (0, _bddTestHelper.expect)(each2.node[0].textContent).to.equal('1');\n      x = 2;\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('2');\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(each1.parentNode);\n      (0, _bddTestHelper.expect)(each2.node[0].textContent).to.equal('2');\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('2', 'after x = 2');\n      return comp.unmount();\n    });\n    it('should create and update embedded each in 3 layer 2', function () {\n      var each1, span1, x;\n      x = 1;\n      comp = div({}, div({}, span1 = new Tag('span', {}, [each1 = funcEach(function () {\n        return [x];\n      }, {\n        itemFunc: function itemFunc(item) {\n          return txt(item);\n        }\n      })])));\n      comp.mount();\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(span1.node);\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('1');\n      x = 2;\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(span1.node);\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('2');\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<div><span>2</span></div>');\n      return comp.unmount();\n    });\n    it('should create and update deeper embedded funcEach', function () {\n      var each1, span1, x;\n      x = 1;\n      comp = div({}, span1 = new Tag('span', {}, [each1 = funcEach(function () {\n        return [x];\n      }, {\n        itemFunc: function itemFunc(item) {\n          return txt(item);\n        }\n      })]));\n      comp.mount();\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(span1.node);\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('1');\n      x = 2;\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(each1.parentNode).to.equal(span1.node);\n      (0, _bddTestHelper.expect)(each1.node[0].textContent).to.equal('2');\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<span>2</span>');\n      return comp.unmount();\n    });\n    return it('should create and update funcEach in list', function () {\n      var each1, items;\n      dontUnmount = true;\n      items = [1, 2];\n      comp = list(txt('text'), each1 = funcEach(function () {\n        return items;\n      }, {\n        itemFunc: function itemFunc(item) {\n          return txt(' ' + item);\n        }\n      }));\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('text 1 2');\n      items = [3];\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('text 3', 1);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('text 3', 2);\n    });\n  });\n});\n\n//# sourceURL=webpack:///./test/coffee/test-group.coffee?");

/***/ }),

/***/ "./test/coffee/test-merge-if.coffee":
/*!******************************************!*\
  !*** ./test/coffee/test-merge-if.coffee ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _bddTestHelper = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\");\n\nvar _helper = __webpack_require__(/*! ./helper */ \"./test/coffee/helper.coffee\");\n\nvar Component, If, List, Tag, Text, a, div, flow, func, if_, list, mergeIf, p, see, span, text, txt;\nvar _dc = dc;\nsee = _dc.see;\nflow = _dc.flow;\nComponent = _dc.Component;\nTag = _dc.Tag;\nText = _dc.Text;\nList = _dc.List;\nIf = _dc.If;\ntxt = _dc.txt;\nlist = _dc.list;\nfunc = _dc.func;\nif_ = _dc.if_;\nmergeIf = _dc.mergeIf;\na = _dc.a;\np = _dc.p;\nspan = _dc.span;\ntext = _dc.text;\ndiv = _dc.div;\ndescribe('domcom/test-merge-if', function () {\n  afterEach(function () {\n    return dc.reset();\n  });\n  it('should construct mergeIf(x, t1, t2)', function () {\n    var comp, t1, t2, x;\n    x = see(0);\n    t1 = txt(1);\n    t2 = txt(2);\n    comp = mergeIf(x, t1, t2);\n    (0, _bddTestHelper.expect)(comp.isText).to.equal(true);\n    comp.mount();\n    (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2');\n    x(1);\n    comp.render();\n    return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('1');\n  });\n  it('should render mergeIf(x, list(t1, t2), list(t2, t1))', function () {\n    var comp, demoNode, t1, t2, x;\n    x = see(0);\n    t1 = txt(1);\n    t2 = txt(2);\n    comp = mergeIf(x, list(t1, t2), list(t2, t1));\n    (0, _bddTestHelper.expect)(comp.isList).to.equal(true);\n    comp.mount(demoNode = (0, _helper.newDemoNode)('if-ref'));\n    (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('2', 'mount');\n    (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('21', 'mount');\n    x(1);\n    comp.render();\n    (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('1', 'update x 1');\n    return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('12', 'update');\n  });\n  it('should render if_(x, list(t2, t1), new List([t1]))', function () {\n    var comp, demoNode, lst, t1, t2, x;\n    x = see(1);\n    t1 = txt(1);\n    t2 = txt(2);\n    comp = mergeIf(x, lst = list(t2, t1), new List([t1]));\n    (0, _bddTestHelper.expect)(comp.isList).to.equal(true);\n    comp.mount(demoNode = (0, _helper.newDemoNode)('if-ref'));\n    (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('21', 'mount');\n    x(0);\n    comp.render();\n    dc.clean();\n    return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('1');\n  });\n  it('should render mergeIf(x, new List([t1]), list(t2, t1))', function () {\n    var comp, demoNode, lst, t1, t2, x;\n    x = see(1);\n    t1 = txt(1);\n    t2 = txt(2);\n    comp = mergeIf(x, new List([t1]), lst = list(t2, t1));\n    (0, _bddTestHelper.expect)(comp.isList).to.equal(true);\n    comp.mount(demoNode = (0, _helper.newDemoNode)('if-ref'));\n    (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('1', 'mount');\n    x(0);\n    comp.render();\n    return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('21');\n  });\n  it('should render mergeIf(x, p(t1), p(t2))', function () {\n    var comp, demoNode, t1, t2, x;\n    x = see(0);\n    t1 = txt(1);\n    t2 = txt(2);\n    comp = mergeIf(x, p(t1), p(t2));\n    (0, _bddTestHelper.expect)(comp.isTag).to.equal(true);\n    comp.mount(demoNode = (0, _helper.newDemoNode)('if-ref'));\n    (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>2</p>', 'mount');\n    x(1);\n    comp.render();\n    dc.clean();\n    return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>1</p>', 'update x 1');\n  });\n  it('should also render mergeIf(x, p(t1), p(t2, t1))', function () {\n    var comp, demoNode, t1, t2, x;\n    x = see(0);\n    t1 = txt(1);\n    t2 = txt(2);\n    comp = mergeIf(x, p(t1), p(t2, t1));\n    (0, _bddTestHelper.expect)(comp.isTag).to.equal(true);\n    comp.mount(demoNode = (0, _helper.newDemoNode)('if-ref'));\n    (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>21</p>', 'mount');\n    x(1);\n    comp.render();\n    dc.clean();\n    (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>1</p>', 'update x 1');\n    x(0);\n    comp.render();\n    dc.clean();\n    (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>21</p>', 'update x 0');\n    x(1);\n    comp.render();\n    dc.clean();\n    return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>1</p>', 'update x 1 again');\n  });\n  it('should render mergeIf(x, p(t1), div(t2))', function () {\n    var comp, t1, x;\n    x = see(0);\n    t1 = txt(1);\n    comp = mergeIf(x, p(t1), div(t1));\n    return (0, _bddTestHelper.expect)(comp instanceof If).to.equal(true);\n  });\n  it('should render mergeIf(x, div(1), div(2))', function () {\n    var comp, x;\n    x = see(0);\n    comp = mergeIf(x, div(1), div(2));\n    comp.mount();\n    (0, _bddTestHelper.expect)(comp.isTag).to.equal(true);\n    (0, _bddTestHelper.expect)(comp.children[0].isText).to.equal(true);\n    (0, _bddTestHelper.expect)(comp.node.tagName).to.equal('DIV', 'tagName');\n    (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2', 'mount');\n    x(1);\n    comp.render();\n    return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1', 'first update');\n  });\n  it('should render mergeIf(x, div(1), div(p(2)))', function () {\n    var comp, x;\n    x = see(0);\n    comp = mergeIf(x, div(1), div(p(2)));\n    comp.mount();\n    (0, _bddTestHelper.expect)(comp.isTag).to.equal(true);\n    (0, _bddTestHelper.expect)(comp.children[0] instanceof If).to.equal(true);\n    (0, _bddTestHelper.expect)(comp.node.tagName).to.equal('DIV', 'tagName');\n    return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<p>2</p>', 'mount');\n  });\n  it('should render mergeIf(x, div({class}, 1), div({class}, 2))', function () {\n    var comp, x;\n    x = see(0);\n    comp = mergeIf(x, div({\n      class: 'a'\n    }, 1), div({\n      class: 'b'\n    }, 2));\n    comp.mount();\n    (0, _bddTestHelper.expect)(comp.isTag).to.equal(true);\n    (0, _bddTestHelper.expect)(comp.node.className).to.equal('b');\n    x(1);\n    comp.render();\n    return (0, _bddTestHelper.expect)(comp.node.className).to.equal('a');\n  });\n  it('should render mergeIf(x, div({a:1}, 1), div({b:2}, 2))', function () {\n    var comp, x;\n    x = see(0);\n    comp = mergeIf(x, div({\n      a: 1\n    }, 1), div({\n      b: 2\n    }, 2));\n    comp.mount();\n    (0, _bddTestHelper.expect)(comp.isTag).to.equal(true);\n    (0, _bddTestHelper.expect)(comp.node.a).to.equal('');\n    (0, _bddTestHelper.expect)(comp.node.b).to.equal(2);\n    x(1);\n    comp.render();\n    (0, _bddTestHelper.expect)(comp.node.a).to.equal(1);\n    return (0, _bddTestHelper.expect)(comp.node.b).to.equal('', 'x 1');\n  });\n  it('should render mergeIf(x, div({onclick}, 1), div({onclick}, 2))', function () {\n    var comp, x;\n    x = see(0);\n    a = 0;\n    comp = mergeIf(x, div({\n      onclick: function onclick() {\n        return a = 1;\n      }\n    }, 1), div({\n      onclick: function onclick() {\n        return a = 2;\n      }\n    }, 2));\n    comp.mount();\n    comp.node.onclick({\n      type: 'click'\n    });\n    (0, _bddTestHelper.expect)(a).to.equal(2, 'first click');\n    x(1);\n    comp.render();\n    comp.node.onclick({\n      type: 'click'\n    });\n    return (0, _bddTestHelper.expect)(a).to.equal(1, 'second click');\n  });\n  it('should NOT merge If(0, div({onclick}, 1), div({onclick}, 2), true, false, true)', function () {\n    var comp; // if test is not function, always should NOT merge\n\n    a = 0;\n    comp = new If(0, div({\n      onclick: function onclick() {\n        return a = 1;\n      }\n    }, 1), div({\n      onclick: function onclick() {\n        return a = 2;\n      }\n    }, 2), true, false, true); // merge, recursive, alwaysBeIf\n\n    comp.mount();\n    comp.node.onclick({\n      type: 'click'\n    });\n    (0, _bddTestHelper.expect)(a).to.equal(2, 'first click');\n    comp.test = 1;\n    comp.render();\n    comp.node.onclick({\n      type: 'click'\n    });\n    return (0, _bddTestHelper.expect)(a).to.equal(1, 'second click');\n  });\n  return it('should render mergeIf(x, div({style}, 1), div({style}, 2))', function () {\n    var comp, x;\n    x = see(0); // if width is just 100 or 200, they are invalid value, and will NOT be set to the dom node\n\n    comp = mergeIf(x, div({\n      style: {\n        width: '100px'\n      }\n    }, 1), div({\n      style: {\n        width: '200px'\n      }\n    }, 2));\n    comp.mount();\n    (0, _bddTestHelper.expect)(comp.node.style.width).to.equal('200px');\n    x(1);\n    comp.render();\n    return (0, _bddTestHelper.expect)(comp.node.style.width).to.equal('100px');\n  });\n});\n\n//# sourceURL=webpack:///./test/coffee/test-merge-if.coffee?");

/***/ }),

/***/ "./test/coffee/test-new-dc.coffee":
/*!****************************************!*\
  !*** ./test/coffee/test-new-dc.coffee ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _bddTestHelper = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\");\n\nvar _helper = __webpack_require__(/*! ./helper */ \"./test/coffee/helper.coffee\");\n\nvar Html, List, Nothing, Tag, Text, classFn, div, getters, html, isComponent, list, p, styleFrom, txt;\nvar _dc = dc;\nTag = _dc.Tag;\nText = _dc.Text;\nList = _dc.List;\ntxt = _dc.txt;\nlist = _dc.list;\np = _dc.p;\ndiv = _dc.div;\nHtml = _dc.Html;\nhtml = _dc.html;\nclassFn = _dc.classFn;\nstyleFrom = _dc.styleFrom;\nNothing = _dc.Nothing;\nisComponent = _dc.isComponent;\ngetters = _dc.getters;\ndescribe(\"test-base-component\", function () {\n  afterEach(function () {\n    return dc.reset();\n  });\n  return describe('update BaseBlock', function () {\n    it('should dc generate a component', function () {\n      var comp;\n      comp = dc();\n      debugger;\n      return (0, _bddTestHelper.expect)(isComponent(comp)).to.be.true;\n    });\n    it('dc() chaining call', function () {\n      var comp, data, view;\n      data = {\n        x: 1,\n        y: 2\n      };\n\n      view = function view(data) {\n        var x, y;\n        x = data.x;\n        y = data.y;\n        return div(div(x), div(y));\n      };\n\n      return comp = dc.mvc(view, data);\n    });\n    return it('dc.react should be an backend', function () {\n      var dr;\n      dr = dc.react();\n      return (0, _bddTestHelper.expect)(dr).to.be.instanceof(dc.React);\n    });\n  });\n});\n\n//# sourceURL=webpack:///./test/coffee/test-new-dc.coffee?");

/***/ }),

/***/ "./test/coffee/test-property.coffee":
/*!******************************************!*\
  !*** ./test/coffee/test-property.coffee ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _bddTestHelper = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\");\n\nvar Component, a, attrToPropName, bind, checkbox, classFn, div, duplex, extendAttrs, func, hide, if_, li, list, model, options, p, see, show, span, splitter, styleFrom, text, util;\nvar _dc = dc;\nutil = _dc.util;\nbind = _dc.bind;\nduplex = _dc.duplex;\nsee = _dc.see;\nclassFn = _dc.classFn;\nstyleFrom = _dc.styleFrom;\nattrToPropName = _dc.attrToPropName;\nextendAttrs = _dc.extendAttrs;\nComponent = _dc.Component;\nlist = _dc.list;\nfunc = _dc.func;\nif_ = _dc.if_;\na = _dc.a;\np = _dc.p;\nspan = _dc.span;\ntext = _dc.text;\nli = _dc.li;\ndiv = _dc.div;\ncheckbox = _dc.checkbox;\nmodel = _dc.model;\nshow = _dc.show;\nhide = _dc.hide;\nsplitter = _dc.splitter;\noptions = _dc.options;\ndescribe('domcom/properties/utilities', function () {\n  it('styleFrom', function () {\n    var x;\n    x = styleFrom(\"display:none; zIndex:100; backgroundColor:white;\");\n    return (0, _bddTestHelper.expect)(x).to.deep.equal({\n      display: 'none',\n      zIndex: '100',\n      backgroundColor: 'white'\n    });\n  });\n  it('attrToPropName', function () {\n    var x;\n    x = attrToPropName(\"background-color\");\n    return (0, _bddTestHelper.expect)(x).to.equal('backgroundColor');\n  });\n  (0, _bddTestHelper.iit)('cssAdd 1', function () {\n    var comp, result;\n    comp = p({\n      style: {\n        width: '1px'\n      }\n    });\n    result = comp.cssAdd('width', 2);\n    (0, _bddTestHelper.expect)(result).to.equal(comp);\n    return (0, _bddTestHelper.expect)(comp.css('width')).to.equal('3px');\n  });\n  it('cssAdd 2', function () {\n    var comp, result;\n    comp = p({\n      style: {\n        width: '0.5%'\n      }\n    });\n    result = comp.cssAdd('width', 3.6);\n    (0, _bddTestHelper.expect)(result).to.equal(comp);\n    return (0, _bddTestHelper.expect)(comp.css('width')).to.equal('4.1%');\n  });\n  return it('cssMul', function () {\n    var comp, result;\n    comp = p({\n      style: {\n        width: '2px'\n      }\n    });\n    result = comp.cssMul('width', 3);\n    (0, _bddTestHelper.expect)(result).to.equal(comp);\n    return (0, _bddTestHelper.expect)(comp.css('width')).to.equal('6px');\n  });\n});\ndescribe('domcom/properties/extendAttrs', function () {\n  it('extendAttrs({class{a:1}}, className({b:1})', function () {\n    var attrs;\n    attrs = extendAttrs({\n      class: {\n        a: 1\n      }\n    }, {\n      className: {\n        b: 1\n      }\n    });\n    return (0, _bddTestHelper.expect)(classFn(attrs.className).call()).to.equal(\"a b\");\n  });\n  return it('extendAttrs({style:{width:1}}, {style:{height:2}})', function () {\n    var attrs;\n    attrs = extendAttrs({\n      style: {\n        width: 1\n      }\n    }, {\n      style: {\n        height: 2\n      }\n    });\n    (0, _bddTestHelper.expect)(attrs.style.width).to.equal(1);\n    return (0, _bddTestHelper.expect)(attrs.style.height).to.equal(2);\n  });\n});\ndescribe(\"domcom/properties/classFn\", function () {\n  it('get value of classFn', function () {\n    var active, x;\n    active = see(true);\n    x = classFn(['a', {\n      b: active\n    }]);\n    (0, _bddTestHelper.expect)(x()).to.equal('a b');\n    active(false);\n    return (0, _bddTestHelper.expect)(x()).to.equal('a');\n  });\n  it('should compute valid', function () {\n    var x;\n    x = classFn(['a']);\n    (0, _bddTestHelper.expect)(x.valid).to.equal(false);\n    (0, _bddTestHelper.expect)(x()).to.equal('a');\n    (0, _bddTestHelper.expect)(x.valid).to.equal(true);\n    x.Object.assign('a');\n    (0, _bddTestHelper.expect)(x.valid).to.equal(true);\n    (0, _bddTestHelper.expect)(x()).to.equal('a');\n    x.Object.assign('b');\n    (0, _bddTestHelper.expect)(x.valid).to.equal(false);\n    (0, _bddTestHelper.expect)(x()).to.equal('a b');\n    x.Object.assign('!b');\n    (0, _bddTestHelper.expect)(x.valid).to.equal(false);\n    return (0, _bddTestHelper.expect)(x()).to.equal('a');\n  });\n  it('should get class property in component', function () {\n    var active, comp;\n    active = see(true);\n    comp = div({\n      class: {\n        a: 1,\n        b: active\n      }\n    });\n    (0, _bddTestHelper.expect)(comp.className.call(comp)).to.equal('a b', 'first');\n    comp.className = classFn({\n      a: 1,\n      b: active // need be assign again before the call before affected the className and its invalid\n\n    });\n    (0, _bddTestHelper.expect)(comp.className.valid).to.equal(false, 'className.valid 1');\n    (0, _bddTestHelper.expect)(comp.hasActiveProperties).to.equal(true, 'hasActiveProperties 1');\n    comp.mount();\n    (0, _bddTestHelper.expect)(comp.className.valid).to.equal(true, 'className.valid 2');\n    (0, _bddTestHelper.expect)(comp.hasActiveProperties).to.equal(false, 'hasActiveProperties 2');\n    (0, _bddTestHelper.expect)(comp.node.className).to.equal('a b', 'second');\n    active(false);\n    (0, _bddTestHelper.expect)(comp.className.valid).to.equal(false, 'className.valid 3');\n    (0, _bddTestHelper.expect)(comp.hasActiveProperties).to.equal(true, 'hasActiveProperties 3');\n    comp.render();\n    return (0, _bddTestHelper.expect)(comp.node.className).to.equal('a', '3');\n  });\n  it('should get functional class property in component', function () {\n    var active, comp;\n    active = see(true);\n    comp = div({\n      class: function _class() {\n        return {\n          a: 1,\n          b: active\n        };\n      }\n    });\n    return (0, _bddTestHelper.expect)(comp.className.call(comp)).to.equal('a b', 'first');\n  });\n  return it('should get false class property in component', function () {\n    var active, comp;\n    active = see(true);\n    comp = div({\n      class: function _class() {\n        return {\n          a: false\n        };\n      }\n    });\n    return (0, _bddTestHelper.expect)(comp.className.call(comp)).to.equal('', 'first');\n  });\n});\ndescribe('domcom/properties/create', function () {\n  return it('should create properties', function () {\n    var comp;\n    comp = p({\n      value: bind({\n        a: 1\n      }, 'a')\n    });\n    (0, _bddTestHelper.expect)(comp.className.valid).to.equal(true, 'className.valid');\n    (0, _bddTestHelper.expect)(comp.hasActiveProperties).to.equal(true, 'hasActiveProperties');\n    comp.mount();\n    return (0, _bddTestHelper.expect)(comp.node.value).to.equal(1);\n  });\n});\ndescribe('domcom/properties/event', function () {\n  it('click event ', function () {\n    var comp, x;\n    x = 1;\n    comp = a({\n      onclick: function onclick() {\n        return x = 2;\n      }\n    }, 'click me');\n    comp.mount('#demo');\n    comp.node.onclick({\n      type: 'click'\n    });\n    return (0, _bddTestHelper.expect)(x).to.equal(2);\n  });\n  it('multiple handlers for one event', function () {\n    var $a, comp, spy1, x;\n    $a = duplex(x = {\n      a: 1\n    }, 'a');\n    spy1 = sinon.spy();\n    comp = text({\n      onchange: spy1,\n      $model: $a\n    });\n    comp.mount();\n    comp.node.value = 2;\n    comp.node.onchange({\n      type: 'change'\n    });\n    (0, _bddTestHelper.expect)(spy1.called).to.equal(true);\n    return (0, _bddTestHelper.expect)(x.a).to.equal('2');\n  });\n  return it('multiple handlers with bind value', function () {\n    var $a, comp, spy1, x;\n    $a = duplex(x = {\n      a: 1\n    }, 'a');\n    spy1 = sinon.spy();\n    comp = text({\n      onchange: spy1\n    }, $a);\n    comp.mount();\n    comp.node.value = 2;\n    comp.node.onchange({\n      type: 'change'\n    });\n    (0, _bddTestHelper.expect)(spy1.called).to.equal(true);\n    return (0, _bddTestHelper.expect)(x.a).to.equal('2');\n  });\n});\ndescribe('domcom/properties/style', function () {\n  it('should set style property with string value', function () {\n    var comp, elm;\n    comp = a({\n      style: \"border:red 1px solid\"\n    }, 'red 1px solid');\n    (0, _bddTestHelper.expect)(comp.className.valid).to.equal(true, 'className.valid');\n    (0, _bddTestHelper.expect)(comp.hasActiveProperties).to.equal(true, 'hasActiveProperties');\n    elm = comp.mount('#demo');\n    return (0, _bddTestHelper.expect)(comp.node.style.border).to.equal(\"1px solid red\");\n  });\n  it('should set style property', function () {\n    var comp, elm;\n    comp = a({\n      style: {\n        border: \"red 1px solid\"\n      }\n    }, 'red 1px solid');\n    elm = comp.mount('#demo');\n    return (0, _bddTestHelper.expect)(comp.node.style.border).to.equal(\"1px solid red\");\n  });\n  it('value of property of style could be dc expression', function () {\n    var comp, elm;\n    comp = a({\n      style: {\n        border: function border() {\n          return \"red 1px solid\";\n        }\n      }\n    }, 'red 1px solid');\n    elm = comp.mount('#demo');\n    return (0, _bddTestHelper.expect)(comp.node.style.border).to.equal(\"1px solid red\");\n  });\n  return (0, _bddTestHelper.nit)('change style dynamically', function () {\n    var color, comp, handle, i, i$, paddingColor, styleFn;\n\n    paddingColor = function paddingColor(hexStr) {\n      if (!hexStr.match(/^\\d/)) {\n        return hexStr;\n      }\n\n      while (hexStr.length < 6) {\n        hexStr = '0' + hexStr;\n      }\n\n      return '#' + hexStr;\n    };\n\n    color = see(\"red\");\n    i$ = see(i = 0);\n    comp = a({\n      style: {\n        borderWidth: flow(i$, function () {\n          return i$() + \"px\";\n        }),\n        borderStyle: \"solid\",\n        borderColor: flow(color, function () {\n          return paddingColor(color().toString(16));\n        })\n      }\n    }, 'dynamic property');\n    comp.mount('#demo');\n    color = 0;\n\n    styleFn = function styleFn() {\n      color += 0x111111;\n      i$(i++);\n      comp.render();\n\n      if (i === 50) {\n        return clearInterval(handle);\n      }\n    };\n\n    return handle = setInterval(styleFn, 5);\n  });\n});\ndescribe('domcom/properties/bind checkbox', function () {\n  return it('bidirectional bind checkbox', function () {\n    var bb, cbx, model1;\n    dc.directive({\n      $model: dc.$model\n    });\n    model1 = {\n      a: 1\n    };\n    bb = duplex(model1, 'a');\n    cbx = checkbox({\n      $model: bb\n    });\n    cbx.mount('#demo');\n    (0, _bddTestHelper.expect)(cbx.node.onchange).to.be.defined;\n    cbx.node.checked = true;\n    cbx.node.onchange({\n      type: 'change'\n    });\n    return (0, _bddTestHelper.expect)(model1.a).to.equal(true);\n  });\n});\n\n//# sourceURL=webpack:///./test/coffee/test-property.coffee?");

/***/ }),

/***/ "./test/coffee/test-singleton.coffee":
/*!*******************************************!*\
  !*** ./test/coffee/test-singleton.coffee ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _bddTestHelper = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\");\n\nvar _helper = __webpack_require__(/*! ./helper */ \"./test/coffee/helper.coffee\");\n\nvar Component, If, Tag, Text, TranBlock, a, case_, div, flow, forceCase, forceIf, func, if_, list, p, pick, see, span, text, txt;\nvar _dc = dc;\nsee = _dc.see;\nflow = _dc.flow;\nComponent = _dc.Component;\nTranBlock = _dc.TranBlock;\nTag = _dc.Tag;\nText = _dc.Text;\ntxt = _dc.txt;\nlist = _dc.list;\nfunc = _dc.func;\nif_ = _dc.if_;\nforceIf = _dc.forceIf;\nIf = _dc.If;\ncase_ = _dc.case_;\nforceCase = _dc.forceCase;\nfunc = _dc.func;\npick = _dc.pick;\na = _dc.a;\np = _dc.p;\nspan = _dc.span;\ntext = _dc.text;\ndiv = _dc.div;\ndescribe('test-singleton: If, Case, Func, Pick, ...', function () {\n  afterEach(function () {\n    return dc.reset();\n  });\n  describe('If', function () {\n    it('should optimize if_', function () {\n      var t, x;\n      t = txt(1);\n      x = 0;\n      (0, _bddTestHelper.expect)(if_(function () {\n        return x;\n      }, t, t)).to.equal(t);\n      (0, _bddTestHelper.expect)(if_(0, 1, t)).to.equal(t);\n      return (0, _bddTestHelper.expect)(if_(1, t, 0)).to.equal(t);\n    });\n    it('should NOT optimize forceIf', function () {\n      var comp, t;\n      t = txt(1);\n      comp = forceIf(0, 1, t);\n      (0, _bddTestHelper.expect)(comp).to.not.equal(t);\n      return (0, _bddTestHelper.expect)(comp.else_).to.equal(t);\n    });\n    it('should compute if_((-> x), p(t), t).family', function () {\n      var t, x;\n      t = txt(1);\n      x = 0;\n      return (0, _bddTestHelper.expect)(if_(function () {\n        return x;\n      }, p(t), t).family[t.dcid]).to.equal(true);\n    });\n    it('should construct if_(x, p(t1), list(p(t2), t1))', function () {\n      var t1, t2, x;\n      x = see(0);\n      t1 = txt(1);\n      t2 = txt(2);\n      return if_(x, p(t1), list(t2, p(t1)));\n    });\n    it('should render if_(see something, txt(1), txt(2))', function () {\n      var comp, x;\n      x = see(0);\n      comp = if_(x, txt(1), txt(2));\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2', 'mount');\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2', 'update');\n      x(1);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('1', 'update x 1');\n      x(0);\n      comp.render();\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2', 'update x 0');\n    });\n    it('should render forceIf(0, txt(1), txt(2))', function () {\n      var comp;\n      comp = forceIf(0, txt(1), txt(2));\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2', 'mount');\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2', 'update');\n      comp.test = 1;\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('1', 'update x 1');\n      comp.test = 0;\n      comp.render();\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2', 'update x 0');\n    });\n    it('should render if_(x, list(t1, t2), list(t2, t1))', function () {\n      var comp, demoNode, t1, t2, x;\n      x = see(0);\n      t1 = txt(1);\n      t2 = txt(2);\n      comp = if_(x, list(t1, t2), list(t2, t1));\n      demoNode = (0, _helper.newDemoNode)('if-ref');\n      comp.mount(demoNode);\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('2', 'mount');\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('21', 'mount');\n      x(1);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node[0].textContent).to.equal('1', 'update x 1');\n      return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('12', 'mount');\n    });\n    it('should render if_(x, list(t2, t1), t1)', function () {\n      var comp, demoNode, lst, t1, t2, x;\n      x = see(1);\n      t1 = txt(1);\n      t2 = txt(2);\n      comp = if_(x, lst = list(t2, t1), t1);\n      comp.mount(demoNode = (0, _helper.newDemoNode)('if-ref'));\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('21', 'mount');\n      x(0);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('1', 'update');\n    });\n    it('should render if_(x, t1, list(t2, t1))', function () {\n      var comp, demoNode, lst, t1, t2, x;\n      x = see(0);\n      t1 = txt(1);\n      t2 = txt(2);\n      comp = if_(x, t1, lst = list(t2, t1));\n      comp.mount(demoNode = (0, _helper.newDemoNode)('if-ref'));\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('21', 'mount');\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('21', 'update');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('1', 'update x 1');\n      x(0);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('21', 'update x 0');\n    });\n    it('should render if_(x, p(t1), list(p(t2), t1))', function () {\n      var comp, demoNode, t1, t2, x;\n      x = see(0);\n      t1 = txt(1);\n      t2 = txt(2);\n      comp = if_(x, p(t1), list(p(t2), t1));\n      comp.mount(demoNode = (0, _helper.newDemoNode)('if-ref'));\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>2</p>1', 'mount');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>1</p>', 'update x 1');\n      x(0);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>2</p>1', 'update x 0');\n      x(1);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>1</p>', 'update x 1 again');\n    });\n    it('should render if_(x, p(t1), div(t2))', function () {\n      var comp, demoNode, t1, x;\n      x = see(0);\n      t1 = txt(1);\n      comp = if_(x, p(t1), div(t1));\n      comp.mount(demoNode = (0, _helper.newDemoNode)('if-ref'));\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<div>1</div>', 'mount');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>1</p>', 'update x 1');\n      x(0);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<div>1</div>', 'update x 0');\n      x(1);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('<p>1</p>', 'update x 1 again');\n    });\n    it('should render p(if_(x, p(t1), list(p(t2), t1)))', function () {\n      var comp, if1, p1, t1, t2, x;\n      x = see(0);\n      t1 = txt(1);\n      t2 = txt(2);\n      comp = p(if1 = if_(x, p1 = p(t1), list(p(t2), t1)));\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<p>2</p>1', 'mount');\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<p>2</p>1', 'update');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<p>1</p>', 'update x 1');\n      x(0);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<p>2</p>1', 'update x 0');\n      x(1);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('<p>1</p>', 'update x 1 again');\n    });\n    it('should render if_(x, p(t1), p list(p(t2), t1))', function () {\n      var comp, p1, p2, t1, t2, x;\n      x = see(0);\n      t1 = txt(1);\n      t2 = txt(2);\n      comp = if_(x, p1 = p(t1), p2 = p(list(p(t2), t1)));\n      comp.mount();\n      (0, _bddTestHelper.expect)(p2.node.innerHTML).to.equal('<p>2</p>1', 'mount');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1', 'update x 1');\n      x(0);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(p2.node.innerHTML).to.equal('<p>2</p>1', 'update x 2');\n    });\n    it('should render if_(x, div(1), div(2))', function () {\n      var comp, x;\n      x = see(0);\n      comp = if_(x, div(1), div(2));\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.tagName).to.equal('DIV', 'tagName');\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2', 'mount');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1', 'first update');\n      x(0);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2', 'second update');\n    });\n    it('should create and update if_ with attrs', function () {\n      var c1, comp, x;\n      x = see(0);\n      comp = if_({\n        class: 'main',\n        fakeProp: x\n      }, x, c1 = p(1), p(2));\n      (0, _bddTestHelper.expect)(comp).to.be.instanceof(Tag);\n      (0, _bddTestHelper.expect)(comp.hasActiveProperties).to.equal(true, 'hasActiveProperties before mounting');\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.tagName).to.equal('DIV');\n      (0, _bddTestHelper.expect)(comp.node.fakeProp).to.equal(0, 'mount fakeProp');\n      (0, _bddTestHelper.expect)(comp.node.childNodes[0].innerHTML).to.equal('2', 'mount innerHTML');\n      (0, _bddTestHelper.expect)(comp.node.childNodes[0].tagName).to.equal('P', 'mount C1 tagName');\n      (0, _bddTestHelper.expect)(comp.hasActiveProperties).to.equal(false, 'hasActiveProperties after mounting');\n      x(1);\n      (0, _bddTestHelper.expect)(comp.props.fakeProp).to.equal(x, 'see invalidate fakeProp');\n      (0, _bddTestHelper.expect)(comp.hasActiveProperties).to.equal(true, 'hasActiveProperties');\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.fakeProp).to.equal(1, 'update fakeProp');\n      (0, _bddTestHelper.expect)(comp.node.childNodes[0].innerHTML).to.equal('1', 'update innerHTML');\n      return (0, _bddTestHelper.expect)(comp.node.childNodes[0]).to.equal(c1.node);\n    });\n    it('should create and render if followed by other node ', function () {\n      var comp, demo2Node, p1, p2, p3, pIf, x;\n      demo2Node = document.getElementById('demo2');\n      demo2Node.innerHTML = '';\n      x = see(0);\n      comp = list(pIf = if_(x, p1 = p(1), p2 = p(2)), p3 = p(3));\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('<p>2</p><p>3</p>', 'mount');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('1', 'pif update');\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('<p>1</p><p>3</p>', 'demo2Node update');\n      return (0, _bddTestHelper.expect)(comp.node[0].innerHTML).to.equal('1', 'comp update');\n    });\n    it('should create and render embedded if', function () {\n      var c0, c1, c2, comp, demo2Node, x;\n      demo2Node = document.getElementById('demo2');\n      demo2Node.innerHTML = '';\n      x = see(0);\n      comp = list(txt(x), c0 = if_(x, c1 = p(1), c2 = p(2)));\n      comp.mount(demo2Node);\n      (0, _bddTestHelper.expect)(demo2Node.innerHTML).to.equal('0<p>2</p>');\n      (0, _bddTestHelper.expect)(comp.parentNode).to.equal(demo2Node);\n      (0, _bddTestHelper.expect)(comp.node[1].innerHTML).to.equal('2');\n      (0, _bddTestHelper.expect)(c0.parentNode).to.equal(comp.parentNode);\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(c0.parentNode).to.equal(comp.parentNode);\n      (0, _bddTestHelper.expect)(c0.node.innerHTML).to.equal('1');\n      (0, _bddTestHelper.expect)(c2.node.innerHTML).to.equal('2');\n      (0, _bddTestHelper.expect)(c0.node).to.equal(c1.node);\n      return (0, _bddTestHelper.expect)(comp.node[1]).to.equal(c1.node);\n    });\n    it('should process embedded if 2-1', function () {\n      var comp, pIf, t1, x;\n      x = see(0);\n      comp = list(t1 = text(1), pIf = if_(x, div(1), div(2)));\n      comp.mount();\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('1');\n      x(0);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n    });\n    it('should process embedded if 2-2', function () {\n      var comp, pIf, t1, x;\n      x = see(0);\n      pIf = if_(x, div(1), div(2));\n      comp = list(t1 = text(x), pIf);\n      comp.mount();\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('1');\n      x(0);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n    });\n    it('should process embedded if 2-3', function () {\n      var comp, pIf, x;\n      x = see(0);\n      comp = list(window.t1 = txt(x), pIf = if_(x, txt(1), txt(2)));\n      comp.mount();\n      (0, _bddTestHelper.expect)(pIf.node.textContent).to.equal('2');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(pIf.node.textContent).to.equal('1');\n      x(0);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(pIf.node.textContent).to.equal('2');\n    });\n    it('should process event in embedded if 2-4', function () {\n      var comp, pIf, t1, x;\n      x = see(0);\n      pIf = if_(x, div(1), div(2));\n      comp = list(t1 = text({\n        onchange: function onchange() {\n          x(parseInt(this.node.value));\n          comp.render();\n          return dc.clean();\n        }\n      }, x), pIf);\n      comp.mount();\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n      t1.node.value = 1;\n      t1.node.onchange({\n        type: 'change'\n      });\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('1');\n      t1.node.value = 0;\n      t1.node.onchange({\n        type: 'change'\n      });\n      return (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n    });\n    it('should process event in embedded if 2-5', function () {\n      var comp, pIf, t1, x;\n      x = see(0);\n      comp = list(t1 = text({\n        onchange: function onchange() {\n          x(parseInt(this.node.value));\n          comp.render();\n          return dc.clean();\n        }\n      }, 1), pIf = if_(x, div(1), div(2)));\n      comp.mount();\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n      t1.node.value = 1;\n      t1.node.onchange({\n        type: 'change'\n      });\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('1');\n      t1.node.value = 0;\n      t1.node.onchange({\n        type: 'change'\n      });\n      return (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n    });\n    it('should process event in embedded if 2-6', function () {\n      var comp, pIf, t1, x;\n      x = see(0);\n      comp = list(t1 = text({\n        onchange: function onchange() {\n          x(parseInt(this.node.value));\n          comp.render();\n          return dc.clean();\n        }\n      }, x), pIf = if_(x, div(1), div(2)));\n      comp.mount();\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n      t1.node.value = 1;\n      t1.node.onchange({\n        type: 'change'\n      });\n      (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('1');\n      t1.node.value = 0;\n      t1.node.onchange({\n        type: 'change'\n      });\n      return (0, _bddTestHelper.expect)(pIf.node.innerHTML).to.equal('2');\n    });\n    return it('should process two list with same children', function () {\n      var comp, demoNode, t1, t2, t3, t4, x;\n      x = see(1);\n      t1 = txt(1);\n      t2 = txt(2);\n      t3 = txt(3);\n      t4 = txt(4);\n      comp = if_(x, list(t1, t2, t3, t4), list(t4, t1, t2, t3));\n      comp.mount(demoNode = (0, _helper.newDemoNode)('list'));\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('1234');\n      x(0);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('4123');\n      x(1);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(demoNode.innerHTML).to.equal('1234');\n    });\n  });\n  describe('Case', function () {\n    it('should create and render case_', function () {\n      var comp, x;\n      x = see(0);\n      comp = case_(x, {\n        1: p('a'),\n        2: p('b'),\n        3: p('c')\n      }, 'others');\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node).to.be.instanceof(window.Text);\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('others');\n      x(1);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('a');\n    });\n    it('should create and render forceCase', function () {\n      var comp;\n      comp = forceCase(0, {\n        1: p('a'),\n        2: p('b'),\n        3: p('c')\n      }, 'others');\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node).to.be.instanceof(window.Text);\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('others');\n      comp.test = 1;\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('a');\n    });\n    return it('should create and render array case_', function () {\n      var comp, x;\n      x = see(3);\n      comp = case_(x, [p('a'), p('b'), p('c')], 'others');\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node).to.be.instanceof(window.Text);\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('others');\n      x(1);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('b');\n    });\n  });\n  describe('Func', function () {\n    it('func(->12) ', function () {\n      var comp;\n      comp = func(function () {\n        return 12;\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('12');\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('12');\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('12');\n    });\n    it('p(-> a))', function () {\n      var comp;\n      a = see(1);\n      comp = p(a);\n      comp.mount();\n      a(2);\n      comp.render();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2', 'update a 2');\n      a(3);\n      comp.render();\n      a(4);\n      comp.render();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('4', 'update a 4');\n    });\n    it('should create func component', function () {\n      var comp, x;\n      x = see(1);\n      comp = func(x);\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node).to.be.instanceof(window.Text);\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('1');\n    });\n    it('should create and render func', function () {\n      var comp, x;\n      x = see(0);\n      comp = func(flow(x, function () {\n        return {\n          1: p(1),\n          2: p(2),\n          3: p(3)\n        }[x()] || 'others';\n      }));\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node).to.be.instanceof(window.Text);\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('others');\n      x(1);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1');\n      x(2);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('2');\n    });\n    it('should update func with attrs', function () {\n      var comp, x;\n      x = see(1);\n      comp = func({\n        class: 'main',\n        fakeProp: x\n      }, x);\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.tagName).to.equal('DIV');\n      (0, _bddTestHelper.expect)(comp.node.fakeProp).to.equal(1);\n      (0, _bddTestHelper.expect)(comp.node).to.be.instanceof(Element);\n      (0, _bddTestHelper.expect)(comp.node.childNodes[0].textContent).to.equal('1');\n      x(2);\n      comp.render();\n      dc.clean();\n      (0, _bddTestHelper.expect)(comp.node.fakeProp).to.equal(2);\n      return (0, _bddTestHelper.expect)(comp.node.childNodes[0].textContent).to.equal('2');\n    });\n    it('should process tag with function', function () {\n      var comp;\n      comp = p(txt(function () {\n        return 1;\n      }));\n      (0, _bddTestHelper.expect)(comp.children[0]).to.be.instanceof(Text);\n      comp.mount();\n      return (0, _bddTestHelper.expect)(comp.node.innerHTML).to.equal('1');\n    });\n    return it('should create and update func with a closure variable', function () {\n      var comp, x;\n      x = see(1);\n      comp = func(function () {\n        return txt(x);\n      });\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('1');\n      x(2);\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2');\n    });\n  });\n  return describe('Pick', function () {\n    it('pick(host)', function () {\n      var comp, host, x;\n      host = {\n        content: 1\n      }; // use content as field by default\n\n      comp = pick(host);\n      x = 0;\n\n      comp.onSetContent = function (value) {\n        return x = 'called';\n      };\n\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('1');\n      host.content = 2;\n      (0, _bddTestHelper.expect)(x).to.equal('called');\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2');\n    });\n    it('pick(host, \"content\", 1) by setContent', function () {\n      var comp, host, x;\n      host = {\n        content: 1\n      };\n      comp = pick(host);\n      x = 0;\n\n      comp.onSetContent = function (value) {\n        return x = 'called';\n      };\n\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('1');\n      comp.setContent(2);\n      (0, _bddTestHelper.expect)(x).to.equal('called');\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2');\n    });\n    it('pick(host, \"activeContent\", 1)', function () {\n      var comp, host, x;\n      host = {};\n      comp = pick(host, \"activeContent\", 1);\n      x = 0;\n\n      comp.onSetContent = function (value) {\n        return x = 'called';\n      };\n\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('1');\n      host.activeContent = 2;\n      (0, _bddTestHelper.expect)(x).to.equal('called');\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2');\n    });\n    return it('pick(host, \"activeContent\", 1) by setContent', function () {\n      var comp, host, x;\n      host = {};\n      comp = pick(host, \"activeContent\", 1);\n      x = 0;\n\n      comp.onSetContent = function (value) {\n        return x = 'called';\n      };\n\n      comp.mount();\n      (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('1');\n      comp.setContent(2);\n      (0, _bddTestHelper.expect)(x).to.equal('called');\n      comp.render();\n      dc.clean();\n      return (0, _bddTestHelper.expect)(comp.node.textContent).to.equal('2');\n    });\n  });\n});\n\n//# sourceURL=webpack:///./test/coffee/test-singleton.coffee?");

/***/ }),

/***/ "./test/coffee/test-toString.coffee":
/*!******************************************!*\
  !*** ./test/coffee/test-toString.coffee ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _bddTestHelper = __webpack_require__(/*! bdd-test-helper */ \"./packages/bdd-test-helper/index.js\");\n\nvar Component, Tag, Text, TranBlock, a, accordion, accordionGroup, bindings, case_, div, each, flow, func, if_, list, p, span, text, txt;\nvar _dc = dc;\nflow = _dc.flow;\nbindings = _dc.bindings;\nComponent = _dc.Component;\nTranBlock = _dc.TranBlock;\nTag = _dc.Tag;\nText = _dc.Text;\ntxt = _dc.txt;\nlist = _dc.list;\nfunc = _dc.func;\nif_ = _dc.if_;\ncase_ = _dc.case_;\nfunc = _dc.func;\neach = _dc.each;\naccordionGroup = _dc.accordionGroup;\naccordion = _dc.accordion;\na = _dc.a;\np = _dc.p;\nspan = _dc.span;\ntext = _dc.text;\ndiv = _dc.div;\ndescribe('toString', function () {\n  it('should toString list of if(tag)', function () {\n    var comp, pIf, t1, x;\n    x = 0;\n    comp = list(t1 = text({\n      onchange: function onchange() {\n        x = parseInt(this.node.value);\n        return comp.render();\n      }\n    }, x), pIf = if_(function () {\n      return x;\n    }, div(1), div(2)));\n    return (0, _bddTestHelper.expect)(comp.toString()).to.match(/<List>\\n  <input type=\"text\" value=0>/);\n  });\n  it('should toString  tag with props', function () {\n    var comp, x;\n    x = 0;\n    comp = div({\n      value: 1\n    }, 1);\n    return (0, _bddTestHelper.expect)(comp.toString()).to.equal('<div value=1>1</div>');\n  });\n  (0, _bddTestHelper.nit)('should case.toString', function () {\n    var comp;\n    comp = case_(function () {\n      return x;\n    }, {\n      1: p(1),\n      2: p(2),\n      3: p(3)\n    }, 'others');\n    return (0, _bddTestHelper.expect)(comp.toString()).to.equal('<Case renew: fn:x>\\n  1: <p>1</p>\\n  2: <p>2</p>\\n  3: <p>3</p>\\n  \"others\"\\n</Case>');\n  });\n  return (0, _bddTestHelper.nit)('should flow.add(a_, b_).toString', function () {\n    var a_, b_, r;\n\n    var _bindings = bindings({\n      a: 1,\n      b: 2\n    });\n\n    a_ = _bindings.a_;\n    b_ = _bindings.b_;\n    r = flow.add(a_, b_);\n    return (0, _bddTestHelper.expect)(r.toString()).to.equal('flow: [m[a],m[b]] --> fn:binaryFn(x(), y())');\n  });\n});\n\n//# sourceURL=webpack:///./test/coffee/test-toString.coffee?");

/***/ }),

/***/ "chai":
/*!***********************!*\
  !*** external "chai" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = chai;\n\n//# sourceURL=webpack:///external_%22chai%22?");

/***/ })

/******/ });